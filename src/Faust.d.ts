import { LibFaust } from "./LibFaustLoader";
import { FaustCompileOptions } from "./types";
export declare const mixer32Base64Code: string;
export declare class Faust {
    private libFaust;
    private createWasmCDSPFactoryFromString;
    private deleteAllWasmCDSPFactories;
    private expandCDSPFromString;
    private getCLibFaustVersion;
    private getWasmCModule;
    private getWasmCModuleSize;
    private getWasmCHelpers;
    private freeWasmCModule;
    private freeCMemory;
    private cleanupAfterException;
    private getErrorAfterException;
    private getLibFaustVersion;
    debug: boolean;
    private dspCount;
    private dspTable;
    private _log;
    constructor(options?: {
        debug: boolean;
        libFaust: LibFaust;
    });
    loadLibFaust(url?: string): Promise<this>;
    readonly ready: Promise<this>;
    private importLibFaustFunctions;
    getNode(code: string, options: FaustCompileOptions): Promise<AudioWorkletNode | ScriptProcessorNode>;
    private compileCode;
    private compileCodes;
    private expandCode;
    private compileDsp;
    private getScriptProcessorNode;
    private getAudioWorkletNode;
    private deleteDsp;
    private getCompiledCodesForMachine;
    private getCompiledCodeFromMachine;
    log(...args: any[]): void;
    error(...args: any[]): void;
}
