{"version":3,"sources":["webpack://Faust2WebAudio/webpack/universalModuleDefinition","webpack://Faust2WebAudio/webpack/bootstrap","webpack://Faust2WebAudio/./node_modules/@babel/runtime/regenerator/index.js","webpack://Faust2WebAudio/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://Faust2WebAudio/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://Faust2WebAudio/./node_modules/regenerator-runtime/runtime.js","webpack://Faust2WebAudio/./node_modules/crypto-libraries/sha1.js","webpack://Faust2WebAudio/./src/LibFaustLoader.js","webpack://Faust2WebAudio/./src/wasm/mixer32.wasm","webpack://Faust2WebAudio/./src/utils.ts","webpack://Faust2WebAudio/./src/FaustWasmToScriptProcessor.ts","webpack://Faust2WebAudio/./src/FaustAudioWorkletProcessor.ts","webpack://Faust2WebAudio/./src/FaustAudioWorkletNode.ts","webpack://Faust2WebAudio/./src/FaustOfflineProcessor.ts","webpack://Faust2WebAudio/./src/Faust.ts","webpack://Faust2WebAudio/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","self","this","args","arguments","apply","err","undefined","obj","configurable","writable","runtime","Op","hasOwn","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","Sha1","msg","options","opt","assign","msgFormat","outFormat","str","TextEncoder","encode","reduce","curr","String","fromCharCode","e","unescape","encodeURIComponent","utf8Encode","hexStr","replace","match","map","byte","parseInt","join","hexBytesToString","K","H","N","Math","ceil","M","Array","j","charCodeAt","pow","floor","W","ROTL","a","b","T","f","h","separator","x","y","z","LibFaustLoader","url","toExport","import","esm","esmKeys","default","exported","jsLocation","wasmLocation","dataLocation","locateFile","path","dir","fetchModule","LibFaust","libFaust","calledRun","_onRuntimeInitialized","onRuntimeInitialized","lengthBytesUTF8","len","u","ab2str","buf","Uint8Array","str2ab","ArrayBuffer","bufView","strLen","mixer32Module","WebAssembly","Module","sBase64","nBlocksSize","atob","nMod3","nMod4","nChr","sB64Enc","nInLen","nOutLen","taBytes","nUint24","nOutIdx","nInIdx","buffer","atoab","split","midiToFreq","note","remap","v","mn0","mx0","mn1","mx1","findPathClosure","findPath","address","k","createWasmImport","voices","memory","env","memoryBase","tableBase","_abs","abs","_acosf","acos","_asinf","asin","_atanf","atan","_atan2f","atan2","_ceilf","_cosf","cos","_expf","exp","_floorf","_fmodf","_logf","log","_log10f","log10","_max_f","max","_min_f","min","_remainderf","round","_powf","_roundf","fround","_sinf","sin","_sqrtf","sqrt","_tanf","tan","_acoshf","acosh","_asinhf","asinh","_atanhf","atanh","_coshf","cosh","_sinhf","sinh","_tanhf","tanh","_acos","_asin","_atan","_atan2","_ceil","_cos","_exp","_floor","_fmod","_log","_log10","_max_","_min_","_remainder","_pow","_round","_sin","_sqrt","_tan","_acosh","_asinh","_atanh","_cosh","_sinh","_tanh","table","Table","initial","element","createWasmMemory","voicesIn","dspMeta","effectMeta","bufferSize","memorySize","pow2limit","size","inputs","outputs","Memory","maximum","toArgv","argv","isArray","FaustWasmToScriptProcessor","faust","initNode","compiledDsp","dspInstance","effectInstance","mixerInstance","audioCtx","plotHandler","node","createScriptProcessor","message","destroyed","outputHandler","computeHandler","$ins","$outs","dspInChannnels","dspOutChannnels","fPitchwheelLabel","fCtrlLabel","fill","numIn","numOut","ptrSize","sampleSize","HEAP","HEAP32","Int32Array","HEAPF32","Float32Array","outputsTimer","outputsItems","inputsItems","$audioHeap","$$audioHeapInputs","$$audioHeapOutputs","$$audioHeapMixing","$audioHeapInputs","$audioHeapOutputs","$audioHeapMixing","$dsp","$mixing","fFreqLabel$","fGateLabel$","fGainLabel$","fDate","mixer","effect","dspVoices$","dspVoicesState","dspVoicesLevel","dspVoicesDate","kActiveVoice","kFreeVoice","kReleaseVoice","kNoVoice","$effect","pathTable$","$buffer","cachedEvents","updateOutputs","item","getParamValue","parseUI","ui","group","parseGroup","items","parseItems","parseItem","index","meta","midi","strMidi","trim","matched","getPlayingVoice","pitch","voice","oldestDatePlaying","Number","MAX_VALUE","allocVoice","instanceClear","getFreeVoice","voiceRelease","voicePlaying","oldestDateRelease","keyOn","channel","velocity","data","$","setParamValue","keyOff","allNotesOff","$gate","midiMessage","cmd","data1","data2","ctrlChange","pitchWheel","ctrl","wheel","pw","compute","input","inputBuffer","getChannelData","set","clearOutput","mixVoice","output","outputBuffer","dspOutput","setup","onaudioprocess","dspInChans","subarray","dspOutChans","endsWith","$voice","init","sampleRate","getSampleRate","getNumInputs","getNumOutputs","instanceInit","instanceConstants","instanceResetUserInterface","metadata","handler","declare","setOutputParamHandler","getOutputParamHandler","setComputeHandler","getComputeHandler","getParams","getJSON","label","JSON","stringify","getUI","destroy","getNode","optionsIn","bufferSizeIn","importObject","mixerObject","imports","print","console","Instance","instantiate","effectModule","dspModule","shaKey","FaustAudioWorkletProcessorWrapper","FaustConst","id","faustData","FaustAudioWorkletProcessor","AudioWorkletProcessor","callback","defaultValue","minValue","maxValue","params","super","handleMessage","port","close","processorOptions","instantiateWasm","onmessage","postMessage","mixerImports","parseItem2","val","process","parameters","chan","paramArray","events","printMemory","registerProcessor","FaustAudioWorkletNode","AudioWorkletNode","numberOfInputs","numberOfOutputs","channelCount","outputChannelCount","channelCountMode","channelInterpretation","onprocessorerror","automationRate","ctrlIn","valueIn","param","setValueAtTime","currentTime","FaustOfflineProcessor","plot","plotted","computed","Faust","createWasmCDSPFactoryFromString","deleteAllWasmCDSPFactories","expandCDSPFromString","getCLibFaustVersion","getWasmCModule","getWasmCModuleSize","getWasmCHelpers","freeWasmCModule","freeCMemory","cleanupAfterException","getErrorAfterException","getLibFaustVersion","generateCAuxFilesFromString","debug","dspTable","workletProcessors","offlineProcessor","logHandler","loadLibFaust","load","importLibFaustFunctions","cwrap","UTF8ToString","code","useWorklet","utils","compileCodes","getAudioWorkletNode","getScriptProcessorNode","inspect","compileCode","factoryName","argvIn","internalMemory","codeSize","$code","_malloc","nameSize","$name","$errorMsg","stringToUTF8","$argv","argvBuffer$","size$arg","$arg","time1","performance","now","$moduleCode","time2","errorMsg","$compiledCode","compiledCodeSize","ui8Code","HEAP8","$helpersCode","helpersCode","_free","strArgv","sha1","hash","effectCode","dspCompiledCode","effectCompiledCode","compiledCodes","dsp","compileDsp","expandCode","$shaKey","$expandedCode","expandedCode","codes","compile","json","parse","compiledDspWithCodes","indexOf","strProcessor","URL","createObjectURL","Blob","audioWorklet","addModule","deleteDsp","stringifyDspTable","strTable","strCode","btoa","parseDspTable","strCodes","getDiagram","FS","readFile","encoding"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Faust2WebAudio\"] = factory();\n\telse\n\t\troot[\"Faust2WebAudio\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* SHA-1 (FIPS 180-4) implementation in JavaScript                    (c) Chris Veness 2002-2019  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/sha1.html                                                       */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n\n/**\n * SHA-1 hash function reference implementation.\n *\n * This is an annotated direct implementation of FIPS 180-4, without any optimisations. It is\n * intended to aid understanding of the algorithm rather than for production use.\n *\n * While it could be used where performance is not critical, I would recommend using the ‘Web\n * Cryptography API’ (developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest) for the browser,\n * or the ‘crypto’ library (nodejs.org/api/crypto.html#crypto_class_hash) in Node.js.\n *\n * See csrc.nist.gov/groups/ST/toolkit/secure_hashing.html\n *     csrc.nist.gov/groups/ST/toolkit/examples.html\n */\nclass Sha1 {\n\n    /**\n     * Generates SHA-1 hash of string.\n     *\n     * @param   {string} msg - (Unicode) string to be hashed.\n     * @param   {Object} [options]\n     * @param   {string} [options.msgFormat=string] - Message format: 'string' for JavaScript string\n     *   (gets converted to UTF-8 for hashing); 'hex-bytes' for string of hex bytes ('616263' ≡ 'abc') .\n     * @param   {string} [options.outFormat=hex] - Output format: 'hex' for string of contiguous\n     *   hex bytes; 'hex-w' for grouping hex bytes into groups of (4 byte / 8 character) words.\n     * @returns {string} Hash of msg as hex character string.\n     *\n     * @example\n     *   import Sha1 from './sha1.js';\n     *   const hash = Sha1.hash('abc'); // 'a9993e364706816aba3e25717850c26c9cd0d89d'\n     */\n    static hash(msg, options) {\n        const defaults = { msgFormat: 'string', outFormat: 'hex' };\n        const opt = Object.assign(defaults, options);\n\n        switch (opt.msgFormat) {\n            default: // default is to convert string to UTF-8, as SHA only deals with byte-streams\n            case 'string':   msg = utf8Encode(msg);       break;\n            case 'hex-bytes':msg = hexBytesToString(msg); break; // mostly for running tests\n        }\n\n        // constants [§4.2.1]\n        const K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\n        // initial hash value [§5.3.1]\n        const H = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n\n        // PREPROCESSING [§6.1.1]\n\n        msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n        // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n        const l = msg.length/4 + 2; // length (in 32-bit integers) of msg + ‘1’ + appended length\n        const N = Math.ceil(l/16);  // number of 16-integer-blocks required to hold 'l' ints\n        const M = new Array(N);\n\n        for (let i=0; i<N; i++) {\n            M[i] = new Array(16);\n            for (let j=0; j<16; j++) {  // encode 4 chars per integer, big-endian encoding\n                M[i][j] = (msg.charCodeAt(i*64+j*4+0)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16)\n                        | (msg.charCodeAt(i*64+j*4+2)<< 8) | (msg.charCodeAt(i*64+j*4+3)<< 0);\n            } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n        }\n        // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n        // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n        // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n        M[N-1][14] = ((msg.length-1)*8) / Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\n        M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\n        // HASH COMPUTATION [§6.1.2]\n\n        for (let i=0; i<N; i++) {\n            const W = new Array(80);\n\n            // 1 - prepare message schedule 'W'\n            for (let t=0;  t<16; t++) W[t] = M[i][t];\n            for (let t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\n            // 2 - initialise five working variables a, b, c, d, e with previous hash value\n            let a = H[0], b = H[1], c = H[2], d = H[3], e = H[4];\n\n            // 3 - main loop (use JavaScript '>>> 0' to emulate UInt32 variables)\n            for (let t=0; t<80; t++) {\n                const s = Math.floor(t/20); // seq for blocks of 'f' functions and 'K' constants\n                const T = (Sha1.ROTL(a, 5) + Sha1.f(s, b, c, d) + e + K[s] + W[t]) >>> 0;\n                e = d;\n                d = c;\n                c = Sha1.ROTL(b, 30) >>> 0;\n                b = a;\n                a = T;\n            }\n\n            // 4 - compute the new intermediate hash value (note 'addition modulo 2^32' – JavaScript\n            // '>>> 0' coerces to unsigned UInt32 which achieves modulo 2^32 addition)\n            H[0] = (H[0]+a) >>> 0;\n            H[1] = (H[1]+b) >>> 0;\n            H[2] = (H[2]+c) >>> 0;\n            H[3] = (H[3]+d) >>> 0;\n            H[4] = (H[4]+e) >>> 0;\n        }\n\n        // convert H0..H4 to hex strings (with leading zeros)\n        for (let h=0; h<H.length; h++) H[h] = ('00000000'+H[h].toString(16)).slice(-8);\n\n        // concatenate H0..H4, with separator if required\n        const separator = opt.outFormat=='hex-w' ? ' ' : '';\n\n        return H.join(separator);\n\n        /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n        function utf8Encode(str) {\n            try {\n                return new TextEncoder().encode(str, 'utf-8').reduce((prev, curr) => prev + String.fromCharCode(curr), '');\n            } catch (e) { // no TextEncoder available?\n                return unescape(encodeURIComponent(str)); // monsur.hossa.in/2012/07/20/utf-8-in-javascript.html\n            }\n        }\n\n        function hexBytesToString(hexStr) { // convert string of hex numbers to a string of chars (eg '616263' -> 'abc').\n            const str = hexStr.replace(' ', ''); // allow space-separated groups\n            return str=='' ? '' : str.match(/.{2}/g).map(byte => String.fromCharCode(parseInt(byte, 16))).join('');\n        }\n    }\n\n\n    /**\n     * Function 'f' [§4.1.1].\n     * @private\n     */\n    static f(s, x, y, z)  {\n        switch (s) {\n            case 0: return (x & y) ^ (~x & z);          // Ch()\n            case 1: return  x ^ y  ^  z;                // Parity()\n            case 2: return (x & y) ^ (x & z) ^ (y & z); // Maj()\n            case 3: return  x ^ y  ^  z;                // Parity()\n        }\n    }\n\n\n    /**\n     * Rotates left (circular left shift) value x by n positions [§3.2.5].\n     * @private\n     */\n    static ROTL(x, n) {\n        return (x<<n) | (x>>>(32-n));\n    }\n\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Sha1;\n","class LibFaustLoader {\n    static async fetchModule(url) {\n        const toExport = {};\n        window.exports = toExport;\n        window.module = { exports: toExport };\n        const esm = await import(/* webpackIgnore: true */url);\n        const esmKeys = Object.keys(esm);\n        if (esmKeys.length === 1 && esmKeys[0] === \"default\") return esm.default;\n        if (esmKeys.length) return esm;\n        const exported = window.module.exports;\n        delete window.exports;\n        delete window.module;\n        return exported;\n    }\n    static load(jsLocation, wasmLocation, dataLocation) {\n        const locateFile = (path, dir) => ({\n            \"libfaust-wasm.wasm\": wasmLocation,\n            \"libfaust-wasm.data\": dataLocation\n        }[path]) || dir + path;\n        return this.fetchModule(jsLocation)\n            .then((LibFaust) => {\n                const libFaust = LibFaust({ locateFile });\n                libFaust.then = (f) => { // Workaround of issue https://github.com/emscripten-core/emscripten/issues/5820\n                    delete libFaust.then;\n                    // We may already be ready to run code at this time. if\n                    // so, just queue a call to the callback.\n                    if (libFaust.calledRun) {\n                        f(libFaust);\n                    } else {\n                        // we are not ready to call then() yet. we must call it\n                        // at the same time we would call onRuntimeInitialized.\n                        const _onRuntimeInitialized = libFaust.onRuntimeInitialized;\n                        libFaust.onRuntimeInitialized = () => {\n                            if (_onRuntimeInitialized) _onRuntimeInitialized();\n                            f(libFaust);\n                        };\n                    }\n                    return libFaust;\n                };\n                libFaust.lengthBytesUTF8 = (str) => {\n                    let len = 0;\n                    for (let i = 0; i < str.length; ++i) {\n                        let u = str.charCodeAt(i);\n                        // eslint-disable-next-line no-mixed-operators\n                        if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n                        if (u <= 127) ++len;\n                        else if (u <= 2047) len += 2;\n                        else if (u <= 65535) len += 3;\n                        else if (u <= 2097151) len += 4;\n                        else if (u <= 67108863) len += 5;\n                        else len += 6;\n                    }\n                    return len;\n                };\n                return libFaust;\n            });\n    }\n}\nexport { LibFaustLoader };\n","export default \"data:application/wasm;base64,AGFzbQEAAAABj4CAgAACYAN/f38AYAR/f39/AX0CkoCAgAABBm1lbW9yeQZtZW1vcnkCAAIDg4CAgAACAAEHmoCAgAACC2NsZWFyT3V0cHV0AAAIbWl4Vm9pY2UAAQqKgoCAAALigICAAAEDfwJAQQAhBQNAAkAgAiAFQQJ0aigCACEDQQAhBANAAkAgAyAEQQJ0akMAAAAAOAIAIARBAWohBCAEIABIBEAMAgUMAQsACwsgBUEBaiEFIAUgAUgEQAwCBQwBCwALCwsLnYGAgAACBH8DfQJ9QQAhB0MAAAAAIQgDQAJAQQAhBiACIAdBAnRqKAIAIQQgAyAHQQJ0aigCACEFA0ACQCAEIAZBAnRqKgIAIQkgCCAJi5chCCAFIAZBAnRqKgIAIQogBSAGQQJ0aiAKIAmSOAIAIAZBAWohBiAGIABIBEAMAgUMAQsACwsgB0EBaiEHIAcgAUgEQAwCBQwBCwALCyAIDwsL\"","/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable object-property-newline */\nimport { TDspMeta, TFaustCompileArgs } from \"./types\";\nimport mixer32DataURI from \"./wasm/mixer32.wasm\";\n\nexport const ab2str = (buf: ArrayBuffer): string => (buf ? String.fromCharCode.apply(null, new Uint8Array(buf)) : null);\nexport const str2ab = (str: string): ArrayBuffer => {\n    if (!str) return null;\n    const buf = new ArrayBuffer(str.length);\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n};\nexport const atoUint6 = (nChr: number) => { // eslint-disable-line arrow-body-style\n    return nChr > 64 && nChr < 91\n        ? nChr - 65\n        : nChr > 96 && nChr < 123\n            ? nChr - 71\n            : nChr > 47 && nChr < 58\n                ? nChr + 4\n                : nChr === 43\n                    ? 62\n                    : nChr === 47\n                        ? 63\n                        : 0;\n};\nexport const atoab = (sBase64: string, nBlocksSize?: number) => {\n    if (typeof window.atob === \"function\") return str2ab(atob(sBase64));\n    const sB64Enc = sBase64.replace(/[^A-Za-z0-9+/]/g, \"\");\n    const nInLen = sB64Enc.length;\n    const nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;\n    const taBytes = new Uint8Array(nOutLen);\n    for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n        nMod4 = nInIdx & 3;\n        nUint24 |= atoUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n        if (nMod4 === 3 || nInLen - nInIdx === 1) {\n            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n                taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n            }\n            nUint24 = 0;\n        }\n    }\n    return taBytes.buffer;\n};\nexport const heap2Str = (buf: number[]) => {\n    let str = \"\";\n    let i = 0;\n    while (buf[i] !== 0) {\n        str += String.fromCharCode(buf[i++]);\n    }\n    return str;\n};\nexport const mixer32Module = new WebAssembly.Module(atoab(mixer32DataURI.split(\",\")[1]));\nexport const midiToFreq = (note: number) => 440.0 * 2 ** ((note - 69) / 12);\nexport const remap = (v: number, mn0: number, mx0: number, mn1: number, mx1: number) => (v - mn0) / (mx0 - mn0) * (mx1 - mn1) + mn1;\nexport const findPath = (o: any, p: string) => {\n    if (typeof o !== \"object\") return false;\n    if (o.address) {\n        return (o.address === p);\n    }\n    for (const k in o) {\n        if (findPath(o[k], p)) return true;\n    }\n    return false;\n};\nexport const findPathClosure = () => {\n    const findPath = (o: any, p: string) => {\n        if (typeof o !== \"object\") return false;\n        if (o.address) {\n            return (o.address === p);\n        }\n        for (const k in o) {\n            if (findPath(o[k], p)) return true;\n        }\n        return false;\n    };\n    return findPath;\n};\nexport const createWasmImport = (voices: number, memory: WebAssembly.Memory) => ({\n    env: {\n        memory: voices ? memory : undefined, memoryBase: 0, tableBase: 0,\n        _abs: Math.abs,\n        // Float version\n        _acosf: Math.acos, _asinf: Math.asin, _atanf: Math.atan, _atan2f: Math.atan2,\n        _ceilf: Math.ceil, _cosf: Math.cos, _expf: Math.exp, _floorf: Math.floor,\n        _fmodf: (x: number, y: number) => x % y,\n        _logf: Math.log, _log10f: Math.log10, _max_f: Math.max, _min_f: Math.min,\n        _remainderf: (x: number, y: number) => x - Math.round(x / y) * y,\n        _powf: Math.pow, _roundf: Math.fround, _sinf: Math.sin, _sqrtf: Math.sqrt, _tanf: Math.tan,\n        _acoshf: Math.acosh, _asinhf: Math.asinh, _atanhf: Math.atanh,\n        _coshf: Math.cosh, _sinhf: Math.sinh, _tanhf: Math.tanh,\n        // Double version\n        _acos: Math.acos, _asin: Math.asin, _atan: Math.atan, _atan2: Math.atan2,\n        _ceil: Math.ceil, _cos: Math.cos, _exp: Math.exp, _floor: Math.floor,\n        _fmod: (x: number, y: number) => x % y,\n        _log: Math.log, _log10: Math.log10, _max_: Math.max, _min_: Math.min,\n        _remainder: (x: number, y: number) => x - Math.round(x / y) * y,\n        _pow: Math.pow, _round: Math.fround, _sin: Math.sin, _sqrt: Math.sqrt, _tan: Math.tan,\n        _acosh: Math.acosh, _asinh: Math.asinh, _atanh: Math.atanh,\n        _cosh: Math.cosh, _sinh: Math.sinh, _tanh: Math.tanh,\n        table: new WebAssembly.Table({ initial: 0, element: \"anyfunc\" })\n    }\n});\nexport const createWasmMemory = (voicesIn: number, dspMeta: TDspMeta, effectMeta: TDspMeta, bufferSize: number) => {\n    // Hack : at least 4 voices (to avoid weird wasm memory bug?)\n    const voices = Math.max(4, voicesIn);\n    // Memory allocator\n    const ptrSize = 4;\n    const sampleSize = 4;\n    const pow2limit = (x: number) => {\n        let n = 65536; // Minimum = 64 kB\n        while (n < x) { n *= 2; }\n        return n;\n    };\n    const effectSize = effectMeta ? effectMeta.size : 0;\n    let memorySize = pow2limit(\n        effectSize\n        + dspMeta.size * voices\n        + (dspMeta.inputs + dspMeta.outputs * 2)\n        * (ptrSize + bufferSize * sampleSize)\n    ) / 65536;\n    memorySize = Math.max(2, memorySize); // As least 2\n    return new WebAssembly.Memory({ initial: memorySize, maximum: memorySize });\n};\nexport const toArgv = (args: TFaustCompileArgs) => {\n    const argv: string[] = [];\n    for (const key in args) {\n        const arg = args[key];\n        if (Array.isArray(arg)) arg.forEach((s: string) => argv.push(key, s));\n        else if (typeof arg === \"number\") argv.push(key, arg.toString());\n        else argv.push(key, arg);\n    }\n    return argv;\n};\n","/* eslint-disable no-restricted-properties */\n/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable object-property-newline */\n/* eslint-disable object-curly-newline */\nimport { Faust } from \"./Faust\";\nimport { mixer32Module, createWasmMemory, createWasmImport, midiToFreq, remap } from \"./utils\";\nimport { TCompiledDsp, FaustScriptProcessorNode, TAudioNodeOptions, FaustWebAssemblyMixerExports, FaustWebAssemblyExports } from \"./types\";\n\nexport class FaustWasmToScriptProcessor {\n    faust: Faust;\n    constructor(faust: Faust) {\n        this.faust = faust;\n    }\n    private initNode(compiledDsp: TCompiledDsp, dspInstance: WebAssembly.Instance, effectInstance: WebAssembly.Instance, mixerInstance: WebAssembly.Instance, audioCtx: AudioContext, bufferSize?: number, memory?: WebAssembly.Memory, voices?: number, plotHandler?: (plotted: Float32Array[], index: number, events?: { type: string; data: any }[]) => any) {\n        let node: FaustScriptProcessorNode;\n        const dspMeta = compiledDsp.dspMeta;\n        const inputs = dspMeta.inputs;\n        const outputs = dspMeta.outputs;\n        try {\n            node = audioCtx.createScriptProcessor(bufferSize, inputs, outputs) as FaustScriptProcessorNode;\n        } catch (e) {\n            this.faust.error(\"Error in createScriptProcessor: \" + e.message);\n            throw e;\n        }\n        node.destroyed = false;\n        node.voices = voices;\n        node.dspMeta = dspMeta;\n\n        node.outputHandler = null;\n        node.computeHandler = null;\n        node.$ins = null;\n        node.$outs = null;\n\n        node.dspInChannnels = [];\n        node.dspOutChannnels = [];\n\n        node.fPitchwheelLabel = [];\n        node.fCtrlLabel = new Array(128).fill(null).map(() => []);\n\n        node.numIn = inputs;\n        node.numOut = outputs;\n\n        this.faust.log(node.numIn);\n        this.faust.log(node.numOut);\n\n        // Memory allocator\n        node.ptrSize = 4;\n        node.sampleSize = 4;\n\n        node.factory = dspInstance.exports as FaustWebAssemblyExports;\n        node.HEAP = node.voices ? memory.buffer : node.factory.memory.buffer;\n        node.HEAP32 = new Int32Array(node.HEAP);\n        node.HEAPF32 = new Float32Array(node.HEAP);\n\n        this.faust.log(node.HEAP);\n        this.faust.log(node.HEAP32);\n        this.faust.log(node.HEAPF32);\n\n        // JSON is as offset 0\n        /*\n        var HEAPU8 = new Uint8Array(sp.HEAP);\n        console.log(this.Heap2Str(HEAPU8));\n        */\n        // bargraph\n        node.outputsTimer = 5;\n        node.outputsItems = [];\n\n        // input items\n        node.inputsItems = [];\n\n        // Start of HEAP index\n\n        // DSP is placed first with index 0. Audio buffer start at the end of DSP.\n        node.$audioHeap = node.voices ? 0 : node.dspMeta.size;\n\n        // Setup pointers offset\n        node.$$audioHeapInputs = node.$audioHeap;\n        node.$$audioHeapOutputs = node.$$audioHeapInputs + node.numIn * node.ptrSize;\n        if (node.voices) {\n            node.$$audioHeapMixing = node.$$audioHeapOutputs + node.numOut * node.ptrSize;\n            // Setup buffer offset\n            node.$audioHeapInputs = node.$$audioHeapMixing + node.numOut * node.ptrSize;\n            node.$audioHeapOutputs = node.$audioHeapInputs + node.numIn * node.bufferSize * node.sampleSize;\n            node.$audioHeapMixing = node.$audioHeapOutputs + node.numOut * node.bufferSize * node.sampleSize;\n            node.$dsp = node.$audioHeapMixing + node.numOut * node.bufferSize * node.sampleSize;\n        } else {\n            node.$audioHeapInputs = node.$$audioHeapOutputs + node.numOut * node.ptrSize;\n            node.$audioHeapOutputs = node.$audioHeapInputs + node.numIn * node.bufferSize * node.sampleSize;\n            // Start of DSP memory : Mono DSP is placed first with index 0\n            node.$dsp = 0;\n        }\n\n        if (node.voices) {\n            node.effectMeta = compiledDsp.effectMeta;\n            node.$mixing = null;\n            node.fFreqLabel$ = [];\n            node.fGateLabel$ = [];\n            node.fGainLabel$ = [];\n            node.fDate = 0;\n\n            node.mixer = mixerInstance.exports as FaustWebAssemblyMixerExports;\n            node.effect = effectInstance ? effectInstance.exports as FaustWebAssemblyExports : null;\n            this.faust.log(node.mixer);\n            this.faust.log(node.factory);\n            this.faust.log(node.effect);\n            // Start of DSP memory ('polyphony' DSP voices)\n            node.dspVoices$ = [];\n            node.dspVoicesState = [];\n            node.dspVoicesLevel = [];\n            node.dspVoicesDate = [];\n\n            node.kActiveVoice = 0;\n            node.kFreeVoice = -1;\n            node.kReleaseVoice = -2;\n            node.kNoVoice = -3;\n\n            for (let i = 0; i < node.voices; i++) {\n                node.dspVoices$[i] = node.$dsp + i * node.dspMeta.size;\n                node.dspVoicesState[i] = node.kFreeVoice;\n                node.dspVoicesLevel[i] = 0;\n                node.dspVoicesDate[i] = 0;\n            }\n            // Effect memory starts after last voice\n            node.$effect = node.dspVoices$[node.voices - 1] + node.dspMeta.size;\n        }\n\n        node.pathTable$ = {};\n\n        node.$buffer = 0;\n        node.cachedEvents = [];\n        node.plotHandler = plotHandler;\n\n        node.updateOutputs = () => {\n            if (node.outputsItems.length > 0 && node.outputHandler && node.outputsTimer-- === 0) {\n                node.outputsTimer = 5;\n                node.outputsItems.forEach(item => node.outputHandler(item, node.factory.getParamValue(node.$dsp, node.pathTable$[item])));\n            }\n        };\n\n        // JSON parsing\n        node.parseUI = ui => ui.forEach(group => node.parseGroup(group));\n        node.parseGroup = group => (group.items ? node.parseItems(group.items) : null);\n        node.parseItems = items => items.forEach(item => node.parseItem(item));\n        node.parseItem = (item) => {\n            if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n                node.parseItems(item.items);\n            } else if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n                // Keep bargraph adresses\n                node.outputsItems.push(item.address);\n                node.pathTable$[item.address] = item.index;\n            } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n                // Keep inputs adresses\n                node.inputsItems.push(item.address);\n                node.pathTable$[item.address] = item.index;\n                if (!item.meta) return;\n                item.meta.forEach((meta) => {\n                    const { midi } = meta;\n                    if (!midi) return;\n                    const strMidi = midi.trim();\n                    if (strMidi === \"pitchwheel\") {\n                        node.fPitchwheelLabel.push({ path: item.address, min: item.min, max: item.max });\n                    } else {\n                        const matched = strMidi.match(/^ctrl\\s(\\d+)/);\n                        if (!matched) return;\n                        node.fCtrlLabel[parseInt(matched[1])].push({ path: item.address, min: item.min, max: item.max });\n                    }\n                });\n            }\n        };\n\n        if (node.voices) {\n            node.getPlayingVoice = (pitch) => {\n                let voice = node.kNoVoice;\n                let oldestDatePlaying = Number.MAX_VALUE;\n                for (let i = 0; i < node.voices; i++) {\n                    if (node.dspVoicesState[i] === pitch) {\n                        // Keeps oldest playing voice\n                        if (node.dspVoicesDate[i] < oldestDatePlaying) {\n                            oldestDatePlaying = node.dspVoicesDate[i];\n                            voice = i;\n                        }\n                    }\n                }\n                return voice;\n            };\n            // Always returns a voice\n            node.allocVoice = (voice) => {\n                // so that envelop is always re-initialized\n                node.factory.instanceClear(node.dspVoices$[voice]);\n                node.dspVoicesDate[voice] = node.fDate++;\n                node.dspVoicesState[voice] = node.kActiveVoice;\n                return voice;\n            };\n            node.getFreeVoice = () => {\n                for (let i = 0; i < node.voices; i++) {\n                    if (node.dspVoicesState[i] === node.kFreeVoice) return node.allocVoice(i);\n                }\n                let voiceRelease = node.kNoVoice;\n                let voicePlaying = node.kNoVoice;\n                let oldestDateRelease = Number.MAX_VALUE;\n                let oldestDatePlaying = Number.MAX_VALUE;\n                for (let i = 0; i < node.voices; i++) { // Scan all voices\n                    // Try to steal a voice in kReleaseVoice mode...\n                    if (node.dspVoicesState[i] === node.kReleaseVoice) {\n                        // Keeps oldest release voice\n                        if (node.dspVoicesDate[i] < oldestDateRelease) {\n                            oldestDateRelease = node.dspVoicesDate[i];\n                            voiceRelease = i;\n                        }\n                    } else if (node.dspVoicesDate[i] < oldestDatePlaying) {\n                        oldestDatePlaying = node.dspVoicesDate[i];\n                        voicePlaying = i;\n                    }\n                }\n                // Then decide which one to steal\n                if (oldestDateRelease !== Number.MAX_VALUE) {\n                    this.faust.log(`Steal release voice : voice_date = ${node.dspVoicesDate[voiceRelease]} cur_date = ${node.fDate} voice = ${voiceRelease}`);\n                    return node.allocVoice(voiceRelease);\n                }\n                if (oldestDatePlaying !== Number.MAX_VALUE) {\n                    this.faust.log(`Steal playing voice : voice_date = ${node.dspVoicesDate[voicePlaying]} cur_date = ${node.fDate} voice = ${voicePlaying}`);\n                    return node.allocVoice(voicePlaying);\n                }\n                return node.kNoVoice;\n            };\n            node.keyOn = (channel, pitch, velocity) => {\n                node.cachedEvents.push({ type: \"keyOn\", data: [channel, pitch, velocity] });\n                const voice = node.getFreeVoice();\n                this.faust.log(\"keyOn voice \" + voice);\n                node.fFreqLabel$.forEach($ => node.factory.setParamValue(node.dspVoices$[voice], $, midiToFreq(pitch)));\n                node.fGateLabel$.forEach($ => node.factory.setParamValue(node.dspVoices$[voice], $, 1));\n                node.fGainLabel$.forEach($ => node.factory.setParamValue(node.dspVoices$[voice], $, velocity / 127));\n                node.dspVoicesState[voice] = pitch;\n            };\n            node.keyOff = (channel, pitch, velocity) => { // eslint-disable-line @typescript-eslint/no-unused-vars\n                node.cachedEvents.push({ type: \"keyOff\", data: [channel, pitch, velocity] });\n                const voice = node.getPlayingVoice(pitch);\n                if (voice === node.kNoVoice) return this.faust.log(\"Playing voice not found...\");\n                node.fGateLabel$.forEach($ => node.factory.setParamValue(node.dspVoices$[voice], $, 0)); // No use of velocity for now...\n                node.dspVoicesState[voice] = node.kReleaseVoice; // Release voice\n                return this.faust.log(\"keyOff voice \" + voice);\n            };\n            node.allNotesOff = () => {\n                node.cachedEvents.push({ type: \"ctrlChange\", data: [0, 123, 0] });\n                for (let i = 0; i < node.voices; i++) {\n                    node.fGateLabel$.forEach($gate => node.factory.setParamValue(node.dspVoices$[i], $gate, 0));\n                    node.dspVoicesState[i] = node.kReleaseVoice;\n                }\n            };\n        }\n        node.midiMessage = (data) => {\n            node.cachedEvents.push({ data, type: \"midi\" });\n            const cmd = data[0] >> 4;\n            const channel = data[0] & 0xf;\n            const data1 = data[1];\n            const data2 = data[2];\n            if (channel === 9) return undefined;\n            if (node.voices) {\n                if (cmd === 8 || (cmd === 9 && data2 === 0)) return node.keyOff(channel, data1, data2);\n                if (cmd === 9) return node.keyOn(channel, data1, data2);\n            }\n            if (cmd === 11) return node.ctrlChange(channel, data1, data2);\n            if (cmd === 14) return node.pitchWheel(channel, (data2 * 128.0 + data1));\n            return undefined;\n        };\n        node.ctrlChange = (channel, ctrl, value) => {\n            node.cachedEvents.push({ type: \"ctrlChange\", data: [channel, ctrl, value] });\n            if (!node.fCtrlLabel[ctrl].length) return;\n            node.fCtrlLabel[ctrl].forEach((ctrl) => {\n                const { path } = ctrl;\n                node.setParamValue(path, remap(value, 0, 127, ctrl.min, ctrl.max));\n                if (node.outputHandler) node.outputHandler(path, node.getParamValue(path));\n            });\n        };\n        node.pitchWheel = (channel, wheel) => {\n            node.cachedEvents.push({ type: \"pitchWheel\", data: [channel, wheel] });\n            node.fPitchwheelLabel.forEach((pw) => {\n                node.setParamValue(pw.path, remap(wheel, 0, 16383, pw.min, pw.max));\n                if (node.outputHandler) node.outputHandler(pw.path, node.getParamValue(pw.path));\n            });\n        };\n        node.compute = (e) => {\n            if (node.destroyed) return false;\n            for (let i = 0; i < node.numIn; i++) { // Read inputs\n                const input = e.inputBuffer.getChannelData(i);\n                const dspInput = node.dspInChannnels[i];\n                dspInput.set(input);\n            }\n            // Possibly call an externally given callback (for instance to synchronize playing a MIDIFile...)\n            if (node.computeHandler) node.computeHandler(node.bufferSize);\n            if (node.voices) {\n                node.mixer.clearOutput(node.bufferSize, node.numOut, node.$outs); // First clear the outputs\n                for (let i = 0; i < node.voices; i++) { // Compute all running voices\n                    node.factory.compute(node.dspVoices$[i], node.bufferSize, node.$ins, node.$mixing); // Compute voice\n                    node.mixer.mixVoice(node.bufferSize, node.numOut, node.$mixing, node.$outs); // Mix it in result\n                }\n                if (node.effect) node.effect.compute(node.$effect, node.bufferSize, node.$outs, node.$outs); // Apply effect. Not a typo, effect is applied on the outs.\n            } else {\n                node.factory.compute(node.$dsp, node.bufferSize, node.$ins, node.$outs); // Compute\n            }\n            node.updateOutputs(); // Update bargraph\n            const outputs = new Array(node.numOut).fill(null).map(() => new Float32Array(node.bufferSize));\n            for (let i = 0; i < node.numOut; i++) { // Write outputs\n                const output = e.outputBuffer.getChannelData(i);\n                const dspOutput = node.dspOutChannnels[i];\n                output.set(dspOutput);\n                outputs[i].set(dspOutput);\n            }\n            if (node.plotHandler) node.plotHandler(outputs, node.$buffer++, node.cachedEvents.length ? node.cachedEvents : undefined);\n            node.cachedEvents = [];\n            return true;\n        };\n        node.setup = () => { // Setup web audio context\n            this.faust.log(\"buffer_size \" + node.bufferSize);\n            node.onaudioprocess = node.compute;\n            if (node.numIn > 0) {\n                node.$ins = node.$$audioHeapInputs;\n                for (let i = 0; i < node.numIn; i++) {\n                    node.HEAP32[(node.$ins >> 2) + i] = node.$audioHeapInputs + node.bufferSize * node.sampleSize * i;\n                }\n                // Prepare Ins buffer tables\n                const dspInChans = node.HEAP32.subarray(node.$ins >> 2, (node.$ins + node.numIn * node.ptrSize) >> 2);\n                for (let i = 0; i < node.numIn; i++) {\n                    node.dspInChannnels[i] = node.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + node.bufferSize * node.sampleSize) >> 2);\n                }\n            }\n            if (node.numOut > 0) {\n                node.$outs = node.$$audioHeapOutputs;\n                if (node.voices) node.$mixing = node.$$audioHeapMixing;\n                for (let i = 0; i < node.numOut; i++) {\n                    node.HEAP32[(node.$outs >> 2) + i] = node.$audioHeapOutputs + node.bufferSize * node.sampleSize * i;\n                    if (node.voices) node.HEAP32[(node.$mixing >> 2) + i] = node.$audioHeapMixing + node.bufferSize * node.sampleSize * i;\n                }\n                // Prepare Out buffer tables\n                const dspOutChans = node.HEAP32.subarray(node.$outs >> 2, (node.$outs + node.numOut * node.ptrSize) >> 2);\n                for (let i = 0; i < node.numOut; i++) {\n                    node.dspOutChannnels[i] = node.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + node.bufferSize * node.sampleSize) >> 2);\n                }\n            }\n            // Parse JSON UI part\n            node.parseUI(node.dspMeta.ui);\n            if (node.effect) node.parseUI(node.effectMeta.ui);\n\n            // keep 'keyOn/keyOff' labels\n            if (node.voices) {\n                node.inputsItems.forEach((item) => {\n                    if (item.endsWith(\"/gate\")) node.fGateLabel$.push(node.pathTable$[item]);\n                    else if (item.endsWith(\"/freq\")) node.fFreqLabel$.push(node.pathTable$[item]);\n                    else if (item.endsWith(\"/gain\")) node.fGainLabel$.push(node.pathTable$[item]);\n                });\n                // Init DSP voices\n                node.dspVoices$.forEach($voice => node.factory.init($voice, audioCtx.sampleRate));\n                // Init effect\n                if (node.effect) node.effect.init(node.$effect, audioCtx.sampleRate);\n            } else {\n                // Init DSP\n                node.factory.init(node.$dsp, audioCtx.sampleRate);\n            }\n        };\n        node.getSampleRate = () => audioCtx.sampleRate;\n        node.getNumInputs = () => node.numIn;\n        node.getNumOutputs = () => node.numOut;\n        node.init = (sampleRate) => {\n            if (node.voices) node.dspVoices$.forEach($voice => node.factory.init($voice, sampleRate));\n            else node.factory.init(node.$dsp, sampleRate);\n        };\n        node.instanceInit = (sampleRate) => {\n            if (node.voices) node.dspVoices$.forEach($voice => node.factory.instanceInit($voice, sampleRate));\n            else node.factory.instanceInit(node.$dsp, sampleRate);\n        };\n        node.instanceConstants = (sampleRate) => {\n            if (node.voices) node.dspVoices$.forEach($voice => node.factory.instanceConstants($voice, sampleRate));\n            else node.factory.instanceConstants(node.$dsp, sampleRate);\n        };\n        node.instanceResetUserInterface = () => {\n            if (node.voices) node.dspVoices$.forEach($voice => node.factory.instanceResetUserInterface($voice));\n            else node.factory.instanceResetUserInterface(node.$dsp);\n        };\n        node.instanceClear = () => {\n            if (node.voices) node.dspVoices$.forEach($voice => node.factory.instanceClear($voice));\n            else node.factory.instanceClear(node.$dsp);\n        };\n        node.metadata = handler => (node.dspMeta.meta ? node.dspMeta.meta.forEach(meta => handler.declare(Object.keys(meta)[0], meta[Object.keys(meta)[0]])) : undefined);\n        node.setOutputParamHandler = handler => node.outputHandler = handler;\n        node.getOutputParamHandler = () => node.outputHandler;\n        node.setComputeHandler = handler => node.computeHandler = handler;\n        node.getComputeHandler = () => node.computeHandler;\n        const findPath = (o: any, p: string) => {\n            if (typeof o !== \"object\") return false;\n            if (o.address) {\n                if (o.address === p) return true;\n                return false;\n            }\n            for (const k in o) {\n                if (findPath(o[k], p)) return true;\n            }\n            return false;\n        };\n        node.setParamValue = (path, value) => {\n            node.cachedEvents.push({ type: \"param\", data: { path, value } });\n            if (node.voices) {\n                if (node.effect && findPath(node.effectMeta.ui, path)) node.effect.setParamValue(node.$effect, node.pathTable$[path], value);\n                else node.dspVoices$.forEach($voice => node.factory.setParamValue($voice, node.pathTable$[path], value));\n            } else {\n                node.factory.setParamValue(node.$dsp, node.pathTable$[path], value);\n            }\n        };\n        node.getParamValue = (path) => {\n            if (node.voices) {\n                if (node.effect && findPath(node.effectMeta.ui, path)) return node.effect.getParamValue(node.$effect, node.pathTable$[path]);\n                return node.factory.getParamValue(node.dspVoices$[0], node.pathTable$[path]);\n            }\n            return node.factory.getParamValue(node.$dsp, node.pathTable$[path]);\n        };\n        node.getParams = () => node.inputsItems;\n        node.getJSON = () => {\n            if (node.voices) {\n                const o = node.dspMeta;\n                const e = node.effectMeta;\n                const r = { ...o };\n                if (e) {\n                    r.ui = [{ type: \"tgroup\", label: \"Sequencer\", items: [\n                        { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                        { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                    ] }];\n                } else {\n                    r.ui = [{ type: \"tgroup\", label: \"Polyphonic\", items: [\n                        { type: \"vgroup\", label: \"Voices\", items: o.ui }\n                    ] }];\n                }\n                return JSON.stringify(r);\n            }\n            return JSON.stringify(node.dspMeta);\n        };\n        node.getUI = () => {\n            if (node.voices) {\n                const o = node.dspMeta;\n                const e = node.effectMeta;\n                if (e) {\n                    return [{ type: \"tgroup\", label: \"Sequencer\", items: [\n                        { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                        { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                    ] }];\n                }\n                return [{ type: \"tgroup\", label: \"Polyphonic\", items: [\n                    { type: \"vgroup\", label: \"Voices\", items: o.ui }\n                ] }];\n            }\n            return node.dspMeta.ui;\n        };\n        node.destroy = () => {\n            node.destroyed = true;\n            delete node.outputHandler;\n            delete node.computeHandler;\n            delete node.plotHandler;\n        };\n        // Init resulting DSP\n        node.setup();\n        return node;\n    }\n    /**\n     * Create a ScriptProcessorNode Web Audio object\n     * by loading and compiling the Faust wasm file\n     *\n     * @param {TAudioNodeOptions} optionsIn\n     * @returns {Promise<FaustScriptProcessorNode>} a Promise for valid WebAudio ScriptProcessorNode object or null\n     */\n    async getNode(optionsIn: TAudioNodeOptions): Promise<FaustScriptProcessorNode> {\n        const { compiledDsp, audioCtx, bufferSize: bufferSizeIn, voices, plotHandler } = optionsIn;\n        const bufferSize = bufferSizeIn || 512;\n        let node: FaustScriptProcessorNode;\n        try {\n            let effectInstance: WebAssembly.Instance;\n            let mixerInstance: WebAssembly.Instance;\n            const memory = createWasmMemory(voices, compiledDsp.dspMeta, compiledDsp.effectMeta, bufferSize);\n            const importObject = createWasmImport(voices, memory);\n            if (voices) {\n                const mixerObject = { imports: { print: console.log }, memory: { memory } }; // eslint-disable-line no-console\n                mixerInstance = new WebAssembly.Instance(mixer32Module, mixerObject);\n                try {\n                    effectInstance = await WebAssembly.instantiate(compiledDsp.effectModule, importObject);\n                } catch (e) {} // eslint-disable-line no-empty\n            }\n            const dspInstance = await WebAssembly.instantiate(compiledDsp.dspModule, importObject);\n            node = this.initNode(compiledDsp, dspInstance, effectInstance, mixerInstance, audioCtx, bufferSize, memory, voices, plotHandler);\n        } catch (e) {\n            this.faust.error(\"Faust \" + compiledDsp.shaKey + \" cannot be loaded or compiled\");\n            throw e;\n        }\n        return node;\n    }\n}\n","/* eslint-disable no-console */\n/* eslint-disable no-restricted-properties */\n/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable object-property-newline */\n/* eslint-env worker */\nimport { TDspMeta, FaustDspNode, TFaustUI, TFaustUIGroup, TFaustUIItem, FaustWebAssemblyExports, FaustWebAssemblyMixerExports, TCompiledDsp } from \"./types\";\n\n// AudioWorklet Globals\ndeclare class AudioWorkletProcessor {\n    public port: MessagePort;\n    public process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: { [key: string]: Float32Array }): boolean;\n    constructor(options: AudioWorkletNodeOptions);\n}\ntype AudioWorkletProcessorConstructor<T extends AudioWorkletProcessor> = {\n    new (options: AudioWorkletNodeOptions): T;\n};\ndeclare function registerProcessor<T extends AudioWorkletProcessor>(name: string, constructor: AudioWorkletProcessorConstructor<T>): void;\ndeclare const currentFrame: number;\ndeclare const currentTime: number;\ndeclare const sampleRate: number;\ninterface AudioParamDescriptor {\n    automationRate?: AutomationRate;\n    defaultValue?: number;\n    maxValue?: number;\n    minValue?: number;\n    name: string;\n}\n\n// Injected by Faust\ntype FaustData = {\n    id: string;\n    voices: number;\n    dspMeta: TDspMeta;\n    effectMeta?: TDspMeta;\n};\ndeclare const faustData: FaustData;\n\ndeclare const remap: (v: number, mn0: number, mx0: number, mn1: number, mx1: number) => number;\ndeclare const midiToFreq: (v: number) => number;\ndeclare const findPath: (o: any, p: string) => boolean;\ndeclare const createWasmImport: (voices: number, memory: WebAssembly.Memory) => { [key: string]: any };\ndeclare const createWasmMemory: (voicesIn: number, dspMeta: TDspMeta, effectMeta: TDspMeta, bufferSize: number) => WebAssembly.Memory;\n\nexport const FaustAudioWorkletProcessorWrapper = () => {\n    class FaustConst {\n        static id = faustData.id;\n        static dspMeta = faustData.dspMeta;\n        static effectMeta = faustData.effectMeta;\n    }\n    class FaustAudioWorkletProcessor extends AudioWorkletProcessor implements FaustDspNode {\n        static bufferSize = 128;\n        // JSON parsing functions\n        static parseUI(ui: TFaustUI, obj: AudioParamDescriptor[] | FaustAudioWorkletProcessor, callback: (...args: any[]) => any) {\n            for (let i = 0; i < ui.length; i++) {\n                this.parseGroup(ui[i], obj, callback);\n            }\n        }\n        static parseGroup(group: TFaustUIGroup, obj: AudioParamDescriptor[] | FaustAudioWorkletProcessor, callback: (...args: any[]) => any) {\n            if (group.items) {\n                this.parseItems(group.items, obj, callback);\n            }\n        }\n        static parseItems(items: TFaustUIItem[], obj: AudioParamDescriptor[] | FaustAudioWorkletProcessor, callback: (...args: any[]) => any) {\n            for (let i = 0; i < items.length; i++) {\n                callback(items[i], obj, callback);\n            }\n        }\n        static parseItem(item: TFaustUIItem, obj: AudioParamDescriptor[], callback: (...args: any[]) => any) {\n            if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n                FaustAudioWorkletProcessor.parseItems(item.items, obj, callback); // callback may not binded to this\n            } else if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n                // Nothing\n            } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"nentry\") {\n                if (!faustData.voices || (!item.address.endsWith(\"/gate\") && !item.address.endsWith(\"/freq\") && !item.address.endsWith(\"/gain\"))) {\n                    obj.push({ name: item.address, defaultValue: item.init || 0, minValue: item.min || 0, maxValue: item.max || 0 });\n                }\n            } else if (item.type === \"button\" || item.type === \"checkbox\") {\n                if (!faustData.voices || (!item.address.endsWith(\"/gate\") && !item.address.endsWith(\"/freq\") && !item.address.endsWith(\"/gain\"))) {\n                    obj.push({ name: item.address, defaultValue: item.init || 0, minValue: 0, maxValue: 1 });\n                }\n            }\n        }\n        static parseItem2(item: TFaustUIItem, obj: FaustAudioWorkletProcessor, callback: (...args: any[]) => any) {\n            if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n                FaustAudioWorkletProcessor.parseItems(item.items, obj, callback); // callback may not binded to this\n            } else if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n                // Keep bargraph adresses\n                obj.outputsItems.push(item.address);\n                obj.pathTable$[item.address] = item.index;\n            } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n                // Keep inputs adresses\n                obj.inputsItems.push(item.address);\n                obj.pathTable$[item.address] = item.index;\n                if (!item.meta) return;\n                item.meta.forEach((meta) => {\n                    const { midi } = meta;\n                    if (!midi) return;\n                    const strMidi = midi.trim();\n                    if (strMidi === \"pitchwheel\") {\n                        obj.fPitchwheelLabel.push({ path: item.address, min: item.min, max: item.max });\n                    } else {\n                        const matched = strMidi.match(/^ctrl\\s(\\d+)/);\n                        if (!matched) return;\n                        obj.fCtrlLabel[parseInt(matched[1])].push({ path: item.address, min: item.min, max: item.max });\n                    }\n                });\n            }\n        }\n        static get parameterDescriptors() {\n            // Analyse JSON to generate AudioParam parameters\n            const params = [] as AudioParamDescriptor[];\n            this.parseUI(FaustConst.dspMeta.ui, params, this.parseItem);\n            if (FaustConst.effectMeta) this.parseUI(FaustConst.effectMeta.ui, params, this.parseItem);\n            return params;\n        }\n        destroyed: boolean;\n        dspInstance: WebAssembly.Instance;\n        effectInstance?: WebAssembly.Instance;\n        mixerInstance?: WebAssembly.Instance;\n        memory?: WebAssembly.Memory;\n\n        bufferSize: number;\n        voices: number;\n        dspMeta: TDspMeta;\n        $ins: number;\n        $outs: number;\n        dspInChannnels: Float32Array[];\n        dspOutChannnels: Float32Array[];\n        fPitchwheelLabel: { path: string; min: number; max: number }[];\n        fCtrlLabel: { path: string; min: number; max: number }[][];\n        numIn: number;\n        numOut: number;\n        ptrSize: number;\n        sampleSize: number;\n        outputsTimer: number;\n        inputsItems: string[];\n        outputsItems: string[];\n        pathTable$: { [address: string]: number };\n        $audioHeap: number;\n        $$audioHeapInputs: number;\n        $$audioHeapOutputs: number;\n        $audioHeapInputs: number;\n        $audioHeapOutputs: number;\n        $dsp: number;\n        factory: FaustWebAssemblyExports;\n        HEAP: ArrayBuffer;\n        HEAP32: Int32Array;\n        HEAPF32: Float32Array;\n\n        effectMeta?: TDspMeta;\n        $effect?: number;\n        $mixing?: number;\n        fFreqLabel$?: number[];\n        fGateLabel$?: number[];\n        fGainLabel$?: number[];\n        fDate?: number;\n        $$audioHeapMixing?: number;\n        $audioHeapMixing?: number;\n        mixer?: FaustWebAssemblyMixerExports;\n        effect?: FaustWebAssemblyExports;\n        dspVoices$?: number[];\n        dspVoicesState?: number[];\n        dspVoicesLevel?: number[];\n        dspVoicesDate?: number[];\n        kActiveVoice?: number;\n        kFreeVoice?: number;\n        kReleaseVoice?: number;\n        kNoVoice?: number;\n\n        $buffer: number;\n        cachedEvents: { type: string; data: any }[];\n\n        outputHandler: (address: string, value: number) => any;\n        computeHandler: (bufferSize: number) => any;\n\n        handleMessage = (e: MessageEvent) => { // use arrow function for binding\n            const msg = e.data;\n            this.cachedEvents.push({ type: e.data.type, data: e.data.data });\n            switch (msg.type) {\n                // Generic MIDI message\n                case \"midi\": this.midiMessage(msg.data); break;\n                // Typed MIDI message\n                case \"keyOn\": this.keyOn(msg.data[0], msg.data[1], msg.data[2]); break;\n                case \"keyOff\": this.keyOff(msg.data[0], msg.data[1], msg.data[2]); break;\n                case \"ctrlChange\": this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]); break;\n                case \"pitchWheel\": this.pitchWheel(msg.data[0], msg.data[1]); break;\n                // Generic data message\n                case \"param\": this.setParamValue(msg.data.path, msg.data.value); break;\n                // case \"patch\": this.onpatch(msg.data); break;\n                case \"destroy\": {\n                    this.port.close();\n                    this.destroyed = true;\n                    delete this.outputHandler;\n                    delete this.computeHandler;\n                    break;\n                }\n                default:\n            }\n        }\n        constructor(options: AudioWorkletNodeOptions) {\n            super(options);\n            const processorOptions: { id: string; voices: number; compiledDsp: TCompiledDsp; mixer32Module: WebAssembly.Module } = options.processorOptions;\n            this.instantiateWasm(processorOptions);\n            this.port.onmessage = this.handleMessage; // Naturally binded with arrow function property\n            this.destroyed = false;\n\n            this.bufferSize = 128;\n            this.voices = processorOptions.voices;\n            this.dspMeta = processorOptions.compiledDsp.dspMeta;\n\n            this.outputHandler = (path, value) => this.port.postMessage({ path, value, type: \"param\" });\n            this.computeHandler = null;\n\n            this.$ins = null;\n            this.$outs = null;\n\n            this.dspInChannnels = [];\n            this.dspOutChannnels = [];\n\n            this.fPitchwheelLabel = [];\n            this.fCtrlLabel = new Array(128).fill(null).map(() => []);\n\n            this.numIn = this.dspMeta.inputs;\n            this.numOut = this.dspMeta.outputs;\n\n            // Memory allocator\n            this.ptrSize = 4;\n            this.sampleSize = 4;\n\n            // Create the WASM instance\n            this.factory = this.dspInstance.exports as FaustWebAssemblyExports;\n            this.HEAP = this.voices ? this.memory.buffer : this.factory.memory.buffer;\n            this.HEAP32 = new Int32Array(this.HEAP);\n            this.HEAPF32 = new Float32Array(this.HEAP);\n\n            // console.log(this.HEAP);\n            // console.log(this.HEAP32);\n            // console.log(this.HEAPF32);\n\n            // bargraph\n            this.outputsTimer = 5;\n            this.outputsItems = [];\n\n            // input items\n            this.inputsItems = [];\n\n            // Start of HEAP index\n\n            // DSP is placed first with index 0. Audio buffer start at the end of DSP.\n            this.$audioHeap = this.voices ? 0 : this.dspMeta.size;\n\n            // Setup pointers offset\n            this.$$audioHeapInputs = this.$audioHeap;\n            this.$$audioHeapOutputs = this.$$audioHeapInputs + this.numIn * this.ptrSize;\n\n            // Setup buffer offset\n            this.$audioHeapInputs = this.$$audioHeapOutputs + (this.numOut * this.ptrSize);\n            this.$audioHeapOutputs = this.$audioHeapInputs + (this.numIn * this.bufferSize * this.sampleSize);\n            if (this.voices) {\n                this.$$audioHeapMixing = this.$$audioHeapOutputs + this.numOut * this.ptrSize;\n                // Setup buffer offset\n                this.$audioHeapInputs = this.$$audioHeapMixing + this.numOut * this.ptrSize;\n                this.$audioHeapOutputs = this.$audioHeapInputs + this.numIn * this.bufferSize * this.sampleSize;\n                this.$audioHeapMixing = this.$audioHeapOutputs + this.numOut * this.bufferSize * this.sampleSize;\n                this.$dsp = this.$audioHeapMixing + this.numOut * this.bufferSize * this.sampleSize;\n            } else {\n                this.$audioHeapInputs = this.$$audioHeapOutputs + this.numOut * this.ptrSize;\n                this.$audioHeapOutputs = this.$audioHeapInputs + this.numIn * this.bufferSize * this.sampleSize;\n                // Start of DSP memory : Mono DSP is placed first with index 0\n                this.$dsp = 0;\n            }\n\n            if (this.voices) {\n                this.effectMeta = FaustConst.effectMeta;\n                this.$mixing = null;\n                this.fFreqLabel$ = [];\n                this.fGateLabel$ = [];\n                this.fGainLabel$ = [];\n                this.fDate = 0;\n\n                this.mixer = this.mixerInstance.exports as FaustWebAssemblyMixerExports;\n                this.effect = this.effectInstance ? this.effectInstance.exports as FaustWebAssemblyExports : null;\n\n                // Start of DSP memory ('polyphony' DSP voices)\n                this.dspVoices$ = [];\n                this.dspVoicesState = [];\n                this.dspVoicesLevel = [];\n                this.dspVoicesDate = [];\n\n                this.kActiveVoice = 0;\n                this.kFreeVoice = -1;\n                this.kReleaseVoice = -2;\n                this.kNoVoice = -3;\n\n                for (let i = 0; i < this.voices; i++) {\n                    this.dspVoices$[i] = this.$dsp + i * this.dspMeta.size;\n                    this.dspVoicesState[i] = this.kFreeVoice;\n                    this.dspVoicesLevel[i] = 0;\n                    this.dspVoicesDate[i] = 0;\n                }\n                // Effect memory starts after last voice\n                this.$effect = this.dspVoices$[this.voices - 1] + this.dspMeta.size;\n            }\n\n            this.pathTable$ = {};\n\n            this.$buffer = 0;\n            this.cachedEvents = [];\n\n            // Init resulting DSP\n            this.setup();\n        }\n        instantiateWasm(options: { id: string; voices: number; compiledDsp: TCompiledDsp; mixer32Module: WebAssembly.Module }) {\n            const memory = createWasmMemory(options.voices, options.compiledDsp.dspMeta, options.compiledDsp.effectMeta, 128);\n            this.memory = memory;\n            const imports = createWasmImport(options.voices, memory);\n            this.dspInstance = new WebAssembly.Instance(options.compiledDsp.dspModule, imports);\n            if (options.compiledDsp.effectModule) {\n                this.effectInstance = new WebAssembly.Instance(options.compiledDsp.effectModule, imports);\n            }\n            if (options.voices) {\n                const mixerImports = { imports: { print: console.log }, memory: { memory } };\n                this.mixerInstance = new WebAssembly.Instance(options.mixer32Module, mixerImports);\n            }\n        }\n        updateOutputs() {\n            if (this.outputsItems.length > 0 && this.outputHandler && this.outputsTimer-- === 0) {\n                this.outputsTimer = 5;\n                this.outputsItems.forEach(item => this.outputHandler(item, this.factory.getParamValue(this.$dsp, this.pathTable$[item])));\n            }\n        }\n\n        parseUI(ui: TFaustUI) {\n            return FaustAudioWorkletProcessor.parseUI(ui, this, FaustAudioWorkletProcessor.parseItem2);\n        }\n        parseGroup(group: TFaustUIGroup) {\n            return FaustAudioWorkletProcessor.parseGroup(group, this, FaustAudioWorkletProcessor.parseItem2);\n        }\n        parseItems(items: TFaustUIItem[]) {\n            return FaustAudioWorkletProcessor.parseItems(items, this, FaustAudioWorkletProcessor.parseItem2);\n        }\n        parseItem(item: TFaustUIItem) {\n            return FaustAudioWorkletProcessor.parseItem2(item, this, FaustAudioWorkletProcessor.parseItem2);\n        }\n\n        setParamValue(path: string, val: number) {\n            if (this.voices) {\n                if (this.effect && findPath(this.effectMeta.ui, path)) this.effect.setParamValue(this.$effect, this.pathTable$[path], val);\n                else this.dspVoices$.forEach($voice => this.factory.setParamValue($voice, this.pathTable$[path], val));\n            } else {\n                this.factory.setParamValue(this.$dsp, this.pathTable$[path], val);\n            }\n        }\n        getParamValue(path: string) {\n            if (this.voices) {\n                if (this.effect && findPath(this.effectMeta.ui, path)) return this.effect.getParamValue(this.$effect, this.pathTable$[path]);\n                return this.factory.getParamValue(this.dspVoices$[0], this.pathTable$[path]);\n            }\n            return this.factory.getParamValue(this.$dsp, this.pathTable$[path]);\n        }\n        setup() {\n            if (this.numIn > 0) {\n                this.$ins = this.$$audioHeapInputs;\n                for (let i = 0; i < this.numIn; i++) {\n                    this.HEAP32[(this.$ins >> 2) + i] = this.$audioHeapInputs + this.bufferSize * this.sampleSize * i;\n                }\n                // Prepare Ins buffer tables\n                const dspInChans = this.HEAP32.subarray(this.$ins >> 2, (this.$ins + this.numIn * this.ptrSize) >> 2);\n                for (let i = 0; i < this.numIn; i++) {\n                    this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + this.bufferSize * this.sampleSize) >> 2);\n                }\n            }\n            if (this.numOut > 0) {\n                this.$outs = this.$$audioHeapOutputs;\n                if (this.voices) this.$mixing = this.$$audioHeapMixing;\n                for (let i = 0; i < this.numOut; i++) {\n                    this.HEAP32[(this.$outs >> 2) + i] = this.$audioHeapOutputs + this.bufferSize * this.sampleSize * i;\n                    if (this.voices) this.HEAP32[(this.$mixing >> 2) + i] = this.$audioHeapMixing + this.bufferSize * this.sampleSize * i;\n                }\n                // Prepare Out buffer tables\n                const dspOutChans = this.HEAP32.subarray(this.$outs >> 2, (this.$outs + this.numOut * this.ptrSize) >> 2);\n                for (let i = 0; i < this.numOut; i++) {\n                    this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + this.bufferSize * this.sampleSize) >> 2);\n                }\n            }\n            // Parse UI\n            this.parseUI(this.dspMeta.ui);\n            if (this.effect) this.parseUI(this.effectMeta.ui);\n\n            // keep 'keyOn/keyOff' labels\n            if (this.voices) {\n                this.inputsItems.forEach((item) => {\n                    if (item.endsWith(\"/gate\")) this.fGateLabel$.push(this.pathTable$[item]);\n                    else if (item.endsWith(\"/freq\")) this.fFreqLabel$.push(this.pathTable$[item]);\n                    else if (item.endsWith(\"/gain\")) this.fGainLabel$.push(this.pathTable$[item]);\n                });\n                // Init DSP voices\n                this.dspVoices$.forEach($voice => this.factory.init($voice, sampleRate));\n                // Init effect\n                if (this.effect) this.effect.init(this.$effect, sampleRate);\n            } else {\n                // Init DSP\n                this.factory.init(this.$dsp, sampleRate); // 'sampleRate' is defined in AudioWorkletGlobalScope\n            }\n        }\n        // Poly only methods\n        getPlayingVoice(pitch: number) {\n            if (!this.voices) return null;\n            let voice = this.kNoVoice;\n            let oldestDatePlaying = Number.MAX_VALUE;\n            for (let i = 0; i < this.voices; i++) {\n                if (this.dspVoicesState[i] === pitch) {\n                    // Keeps oldest playing voice\n                    if (this.dspVoicesDate[i] < oldestDatePlaying) {\n                        oldestDatePlaying = this.dspVoicesDate[i];\n                        voice = i;\n                    }\n                }\n            }\n            return voice;\n        }\n        allocVoice(voice: number) {\n            if (!this.voices) return null;\n            // so that envelop is always re-initialized\n            this.factory.instanceClear(this.dspVoices$[voice]);\n            this.dspVoicesDate[voice] = this.fDate++;\n            this.dspVoicesState[voice] = this.kActiveVoice;\n            return voice;\n        }\n        getFreeVoice() {\n            if (!this.voices) return null;\n            for (let i = 0; i < this.voices; i++) {\n                if (this.dspVoicesState[i] === this.kFreeVoice) return this.allocVoice(i);\n            }\n            let voiceRelease = this.kNoVoice;\n            let voicePlaying = this.kNoVoice;\n            let oldestDateRelease = Number.MAX_VALUE;\n            let oldestDatePlaying = Number.MAX_VALUE;\n            for (let i = 0; i < this.voices; i++) { // Scan all voices\n                // Try to steal a voice in kReleaseVoice mode...\n                if (this.dspVoicesState[i] === this.kReleaseVoice) {\n                    // Keeps oldest release voice\n                    if (this.dspVoicesDate[i] < oldestDateRelease) {\n                        oldestDateRelease = this.dspVoicesDate[i];\n                        voiceRelease = i;\n                    }\n                } else if (this.dspVoicesDate[i] < oldestDatePlaying) {\n                    oldestDatePlaying = this.dspVoicesDate[i];\n                    voicePlaying = i;\n                }\n            }\n            // Then decide which one to steal\n            if (oldestDateRelease !== Number.MAX_VALUE) {\n                // console.log(`Steal release voice : voice_date = ${this.dspVoicesDate[voiceRelease]} cur_date = ${this.fDate} voice = ${voiceRelease}`);\n                return this.allocVoice(voiceRelease);\n            }\n            if (oldestDatePlaying !== Number.MAX_VALUE) {\n                // console.log(`Steal playing voice : voice_date = ${this.dspVoicesDate[voicePlaying]} cur_date = ${this.fDate} voice = ${voicePlaying}`);\n                return this.allocVoice(voicePlaying);\n            }\n            return this.kNoVoice;\n        }\n        keyOn(channel: number, pitch: number, velocity: number) {\n            if (!this.voices) return;\n            const voice = this.getFreeVoice();\n            // console.log(\"keyOn voice \" + voice);\n            this.fFreqLabel$.forEach($ => this.factory.setParamValue(this.dspVoices$[voice], $, midiToFreq(pitch)));\n            this.fGateLabel$.forEach($ => this.factory.setParamValue(this.dspVoices$[voice], $, 1));\n            this.fGainLabel$.forEach($ => this.factory.setParamValue(this.dspVoices$[voice], $, velocity / 127));\n            this.dspVoicesState[voice] = pitch;\n        }\n        keyOff(channel: number, pitch: number, velocity: number) {\n            if (!this.voices) return;\n            const voice = this.getPlayingVoice(pitch);\n            if (voice === this.kNoVoice) return; // console.log(\"Playing voice not found...\");\n            // console.log(\"keyOff voice \" + voice);\n            this.fGateLabel$.forEach($ => this.factory.setParamValue(this.dspVoices$[voice], $, 0)); // No use of velocity for now...\n            this.dspVoicesState[voice] = this.kReleaseVoice; // Release voice\n        }\n        allNotesOff() {\n            if (!this.voices) return;\n            for (let i = 0; i < this.voices; i++) {\n                this.fGateLabel$.forEach($gate => this.factory.setParamValue(this.dspVoices$[i], $gate, 0));\n                this.dspVoicesState[i] = this.kReleaseVoice;\n            }\n        }\n\n        midiMessage(data: number[] | Uint8Array) {\n            const cmd = data[0] >> 4;\n            const channel = data[0] & 0xf;\n            const data1 = data[1];\n            const data2 = data[2];\n            if (channel === 9) return;\n            if (cmd === 8 || (cmd === 9 && data2 === 0)) this.keyOff(channel, data1, data2);\n            else if (cmd === 9) this.keyOn(channel, data1, data2);\n            else if (cmd === 11) this.ctrlChange(channel, data1, data2);\n            else if (cmd === 14) this.pitchWheel(channel, data2 * 128.0 + data1);\n        }\n        ctrlChange(channel: number, ctrl: number, value: number) {\n            if (!this.fCtrlLabel[ctrl].length) return;\n            this.fCtrlLabel[ctrl].forEach((ctrl) => {\n                const { path } = ctrl;\n                this.setParamValue(path, remap(value, 0, 127, ctrl.min, ctrl.max));\n                if (this.outputHandler) this.outputHandler(path, this.getParamValue(path));\n            });\n        }\n        pitchWheel(channel: number, wheel: number) {\n            this.fPitchwheelLabel.forEach((pw) => {\n                this.setParamValue(pw.path, remap(wheel, 0, 16383, pw.min, pw.max));\n                if (this.outputHandler) this.outputHandler(pw.path, this.getParamValue(pw.path));\n            });\n        }\n        process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: { [key: string]: Float32Array }) {\n            if (this.destroyed) return false;\n            const input = inputs[0];\n            const output = outputs[0];\n            // Check inputs\n            if (this.numIn > 0 && (!input || !input[0] || input[0].length === 0)) {\n                // console.log(\"Process input error\");\n                return true;\n            }\n            // Check outputs\n            if (this.numOut > 0 && (!output || !output[0] || output[0].length === 0)) {\n                // console.log(\"Process output error\");\n                return true;\n            }\n            // Copy inputs\n            if (input !== undefined) {\n                for (let chan = 0; chan < Math.min(this.numIn, input.length); ++chan) {\n                    const dspInput = this.dspInChannnels[chan];\n                    dspInput.set(input[chan]);\n                }\n            }\n            // Update controls (possibly needed for sample accurate control)\n            for (const path in parameters) {\n                const paramArray = parameters[path];\n                this.setParamValue(path, paramArray[0]);\n            }\n            // Possibly call an externally given callback (for instance to synchronize playing a MIDIFile...)\n            if (this.computeHandler) this.computeHandler(this.bufferSize);\n            if (this.voices) {\n                this.mixer.clearOutput(this.bufferSize, this.numOut, this.$outs); // First clear the outputs\n                for (let i = 0; i < this.voices; i++) { // Compute all running voices\n                    this.factory.compute(this.dspVoices$[i], this.bufferSize, this.$ins, this.$mixing); // Compute voice\n                    this.mixer.mixVoice(this.bufferSize, this.numOut, this.$mixing, this.$outs); // Mix it in result\n                }\n                if (this.effect) this.effect.compute(this.$effect, this.bufferSize, this.$outs, this.$outs); // Apply effect. Not a typo, effect is applied on the outs.\n            } else {\n                this.factory.compute(this.$dsp, this.bufferSize, this.$ins, this.$outs); // Compute\n            }\n            // Update bargraph\n            this.updateOutputs();\n            // Copy outputs\n            if (output !== undefined) {\n                for (let i = 0; i < Math.min(this.numOut, output.length); i++) {\n                    const dspOutput = this.dspOutChannnels[i];\n                    output[i].set(dspOutput);\n                }\n                this.port.postMessage({ type: \"plot\", value: output, index: this.$buffer++, events: this.cachedEvents });\n                this.cachedEvents = [];\n            }\n            return true;\n        }\n        printMemory() {\n            console.log(\"============== Memory layout ==============\");\n            console.log(\"dspMeta.size: \" + this.dspMeta.size);\n            console.log(\"$audioHeap: \" + this.$audioHeap);\n            console.log(\"$$audioHeapInputs: \" + this.$$audioHeapInputs);\n            console.log(\"$$audioHeapOutputs: \" + this.$$audioHeapOutputs);\n            console.log(\"$$audioHeapMixing: \" + this.$$audioHeapMixing);\n            console.log(\"$audioHeapInputs: \" + this.$audioHeapInputs);\n            console.log(\"$audioHeapOutputs: \" + this.$audioHeapOutputs);\n            console.log(\"$audioHeapMixing: \" + this.$audioHeapMixing);\n            console.log(\"$dsp: \" + this.$dsp);\n            if (this.dspVoices$) this.dspVoices$.forEach(($voice, i) => console.log(\"dspVoices$[\" + i + \"]: \" + $voice));\n            console.log(\"$effect: \" + this.$effect);\n            console.log(\"$mixing: \" + this.$mixing);\n        }\n    }\n\n    // Globals\n    // Synchronously compile and instantiate the WASM module\n    registerProcessor(FaustConst.id || \"mydsp\", FaustAudioWorkletProcessor);\n};\n","/* eslint-disable object-curly-newline */\n/* eslint-disable object-property-newline */\nimport { TDspMeta, TCompiledDsp, TFaustUI, TFaustUIGroup, TFaustUIItem } from \"./types\";\nimport { remap } from \"./utils\";\n\nexport class FaustAudioWorkletNode extends (window.AudioWorkletNode ? AudioWorkletNode : null) {\n    onprocessorerror = (e: ErrorEvent) => {\n        console.error(\"Error from \" + this.dspMeta.name + \" AudioWorkletNode: \"); // eslint-disable-line no-console\n        throw e.error;\n    }\n    /* WAP ??\n    getMetadata = this.getJSON;\n    setParam = this.setParamValue;\n    getParam = this.getParamValue;\n    inputChannelCount = this.getNumInputs;\n    outputChannelCount = this.getNumOutputs;\n    getParams = () => this.inputsItems;\n    getDescriptor = this.getParams;\n    onMidi = this.midiMessage;\n    getState = async () => {\n        const params = {} as { [key: string]: string };\n        this.getDescriptor().forEach(key => params[key] = JSON.stringify(this.getParam(key)));\n        return params;\n    }\n    setState = async (state: { [key: string]: number; }) => {\n        for (const key in state) {\n            this.setParam(key, state[key]);\n        }\n        try {\n            this.gui.setAttribute(\"state\", JSON.stringify(state));\n        } catch (error) {\n            console.warn(\"Plugin without gui or GUI not defined: \", error);\n        }\n        return state;\n    }\n    setPatch = (patch: any) => this.presets ? this.setState(this.presets[patch]) : undefined; // ??\n    metadata = (handler: (...args: any[]) => any) => handler(null);\n    gui: any;\n    presets: any;\n    */\n\n    voices?: number;\n    dspMeta: TDspMeta;\n    effectMeta: TDspMeta;\n    outputHandler: (address: string, value: number) => any;\n    inputsItems: string[];\n    outputsItems: string[];\n\n    fPitchwheelLabel: { path: string; min: number; max: number }[];\n    fCtrlLabel: { path: string; min: number; max: number }[][];\n\n    plotHandler: (plotted: Float32Array[], index: number, events?: { type: string; data: any }[]) => any;\n\n    constructor(options: { audioCtx: AudioContext; id: string; compiledDsp: TCompiledDsp; voices?: number; plotHandler?: (plotted: Float32Array[], index: number, events?: { type: string; data: any }[]) => any; mixer32Module: WebAssembly.Module }) {\n        super(options.audioCtx, options.id, {\n            numberOfInputs: options.compiledDsp.dspMeta.inputs > 0 ? 1 : 0,\n            numberOfOutputs: options.compiledDsp.dspMeta.outputs > 0 ? 1 : 0,\n            channelCount: Math.max(1, options.compiledDsp.dspMeta.inputs),\n            outputChannelCount: [options.compiledDsp.dspMeta.outputs],\n            channelCountMode: \"explicit\",\n            channelInterpretation: \"speakers\",\n            processorOptions: { id: options.id, voices: options.voices, compiledDsp: options.compiledDsp, mixer32Module: options.mixer32Module }\n        });\n        // Patch it with additional functions\n        this.port.onmessage = (e: MessageEvent) => {\n            if (e.data.type === \"param\" && this.outputHandler) {\n                this.outputHandler(e.data.path, e.data.value);\n            } else if (e.data.type === \"plot\") {\n                if (this.plotHandler) this.plotHandler(e.data.value, e.data.index, e.data.events);\n            }\n        };\n        this.voices = options.voices;\n        this.dspMeta = options.compiledDsp.dspMeta;\n        this.effectMeta = options.compiledDsp.effectMeta;\n        this.outputHandler = null;\n        this.inputsItems = [];\n        this.outputsItems = [];\n        this.fPitchwheelLabel = [];\n        this.fCtrlLabel = new Array(128).fill(null).map(() => []);\n        this.plotHandler = options.plotHandler;\n        this.parseUI(this.dspMeta.ui);\n        if (this.effectMeta) this.parseUI(this.effectMeta.ui);\n        try {\n            if (this.parameters) this.parameters.forEach(p => p.automationRate = \"k-rate\");\n        } catch (e) {} // eslint-disable-line no-empty\n    }\n    parseUI(ui: TFaustUI) {\n        ui.forEach(group => this.parseGroup(group));\n    }\n    parseGroup(group: TFaustUIGroup) {\n        if (group.items) this.parseItems(group.items);\n    }\n    parseItems(items: TFaustUIItem[]) {\n        items.forEach(item => this.parseItem(item));\n    }\n    parseItem(item: TFaustUIItem) {\n        if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n            this.parseItems(item.items);\n        } else if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n            // Keep bargraph adresses\n            this.outputsItems.push(item.address);\n        } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n            // Keep inputs adresses\n            this.inputsItems.push(item.address);\n            if (!item.meta) return;\n            item.meta.forEach((meta) => {\n                const { midi } = meta;\n                if (!midi) return;\n                const strMidi = midi.trim();\n                if (strMidi === \"pitchwheel\") {\n                    this.fPitchwheelLabel.push({ path: item.address, min: item.min, max: item.max });\n                } else {\n                    const matched = strMidi.match(/^ctrl\\s(\\d+)/);\n                    if (!matched) return;\n                    this.fCtrlLabel[parseInt(matched[1])].push({ path: item.address, min: item.min, max: item.max });\n                }\n            });\n        }\n    }\n\n    /**\n     * Instantiates a new polyphonic voice.\n     *\n     * @param {number} channel - the MIDI channel (0..15, not used for now)\n     * @param {number} pitch - the MIDI pitch (0..127)\n     * @param {number} velocity - the MIDI velocity (0..127)\n     * @memberof FaustAudioWorkletNode\n     */\n    keyOn(channel: number, pitch: number, velocity: number) {\n        const e = { type: \"keyOn\", data: [channel, pitch, velocity] };\n        this.port.postMessage(e);\n    }\n    /**\n     * De-instantiates a polyphonic voice.\n     *\n     * @param {number} channel - the MIDI channel (0..15, not used for now)\n     * @param {number} pitch - the MIDI pitch (0..127)\n     * @param {number} velocity - the MIDI velocity (0..127)\n     * @memberof FaustAudioWorkletNode\n     */\n    keyOff(channel: number, pitch: number, velocity: number) {\n        const e = { type: \"keyOff\", data: [channel, pitch, velocity] };\n        this.port.postMessage(e);\n    }\n    /**\n     * Gently terminates all the active voices.\n     *\n     * @memberof FaustAudioWorkletNode\n     */\n    allNotesOff() {\n        const e = { type: \"ctrlChange\", data: [0, 123, 0] };\n        this.port.postMessage(e);\n    }\n    ctrlChange(channel: number, ctrlIn: number, valueIn: any) {\n        const e = { type: \"ctrlChange\", data: [channel, ctrlIn, valueIn] };\n        this.port.postMessage(e);\n        if (!this.fCtrlLabel[ctrlIn].length) return;\n        this.fCtrlLabel[ctrlIn].forEach((ctrl) => {\n            const { path } = ctrl;\n            const value = remap(valueIn, 0, 127, ctrl.min, ctrl.max);\n            const param = this.parameters.get(path);\n            if (param) param.setValueAtTime(value, this.context.currentTime);\n        });\n    }\n    pitchWheel(channel: number, wheel: number) {\n        const e = { type: \"pitchWheel\", data: [channel, wheel] };\n        this.port.postMessage(e);\n        this.fPitchwheelLabel.forEach((pw) => {\n            const { path } = pw;\n            const value = remap(wheel, 0, 16383, pw.min, pw.max);\n            const param = this.parameters.get(path);\n            if (param) param.setValueAtTime(value, this.context.currentTime);\n        });\n    }\n    midiMessage(data: number[] | Uint8Array) {\n        const cmd = data[0] >> 4;\n        const channel = data[0] & 0xf;\n        const data1 = data[1];\n        const data2 = data[2];\n        if (channel === 9) return;\n        if (cmd === 8 || (cmd === 9 && data2 === 0)) this.keyOff(channel, data1, data2);\n        else if (cmd === 9) this.keyOn(channel, data1, data2);\n        else if (cmd === 11) this.ctrlChange(channel, data1, data2);\n        else if (cmd === 14) this.pitchWheel(channel, data2 * 128.0 + data1);\n        else this.port.postMessage({ data, type: \"midi\" });\n    }\n    metadata() {}\n    setParamValue(path: string, value: number) {\n        const e = { type: \"param\", data: { path, value } };\n        this.port.postMessage(e);\n        const param = this.parameters.get(path);\n        if (param) param.setValueAtTime(value, this.context.currentTime);\n    }\n    getParamValue(path: string) {\n        const param = this.parameters.get(path);\n        if (param) return param.value;\n        return null;\n    }\n    setOutputParamHandler(handler: (address: string, value: number) => any) {\n        this.outputHandler = handler;\n    }\n    getOutputParamHandler() {\n        return this.outputHandler;\n    }\n    getNumInputs() {\n        return this.dspMeta.inputs;\n    }\n    getNumOutputs() {\n        return this.dspMeta.outputs;\n    }\n    getParams() {\n        return this.inputsItems;\n    }\n    getJSON() {\n        if (this.voices) {\n            const o = this.dspMeta;\n            const e = this.effectMeta;\n            const r = { ...o };\n            if (e) {\n                r.ui = [{ type: \"tgroup\", label: \"Sequencer\", items: [\n                    { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                    { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                ] }];\n            } else {\n                r.ui = [{ type: \"tgroup\", label: \"Polyphonic\", items: [\n                    { type: \"vgroup\", label: \"Voices\", items: o.ui }\n                ] }];\n            }\n            return JSON.stringify(r);\n        }\n        return JSON.stringify(this.dspMeta);\n    }\n    getUI() {\n        if (this.voices) {\n            const o = this.dspMeta;\n            const e = this.effectMeta;\n            if (e) {\n                return [{ type: \"tgroup\", label: \"Sequencer\", items: [\n                    { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                    { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                ] }];\n            }\n            return [{ type: \"tgroup\", label: \"Polyphonic\", items: [\n                { type: \"vgroup\", label: \"Voices\", items: o.ui }\n            ] }];\n        }\n        return this.dspMeta.ui;\n    }\n    destroy() {\n        this.port.postMessage({ type: \"destroy\" });\n        this.port.close();\n        delete this.plotHandler;\n        delete this.outputHandler;\n    }\n}\n","/* eslint-disable no-restricted-properties */\n/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable object-property-newline */\nimport { TDspMeta, FaustWebAssemblyExports, TCompiledDsp } from \"./types\";\n\nexport class FaustOfflineProcessor {\n    private bufferSize = 1024;\n    private sampleRate: number;\n    private dspMeta: TDspMeta;\n    private $ins: number;\n    private $outs: number;\n    private dspInChannnels: Float32Array[];\n    private dspOutChannnels: Float32Array[];\n    private numIn: number;\n    private numOut: number;\n    private ptrSize: number;\n    private sampleSize: number;\n    private $audioHeap: number;\n    private $$audioHeapInputs: number;\n    private $$audioHeapOutputs: number;\n    private $audioHeapInputs: number;\n    private $audioHeapOutputs: number;\n    private $dsp: number;\n    private factory: FaustWebAssemblyExports;\n    private HEAP: ArrayBuffer;\n    private HEAP32: Int32Array;\n    private HEAPF32: Float32Array;\n    private output: Float32Array[];\n\n    static get importObject() {\n        return {\n            env: {\n                memory: undefined as WebAssembly.Memory, memoryBase: 0, tableBase: 0,\n                _abs: Math.abs,\n                // Float version\n                _acosf: Math.acos, _asinf: Math.asin, _atanf: Math.atan, _atan2f: Math.atan2,\n                _ceilf: Math.ceil, _cosf: Math.cos, _expf: Math.exp, _floorf: Math.floor,\n                _fmodf: (x: number, y: number) => x % y,\n                _logf: Math.log, _log10f: Math.log10, _max_f: Math.max, _min_f: Math.min,\n                _remainderf: (x: number, y: number) => x - Math.round(x / y) * y,\n                _powf: Math.pow, _roundf: Math.fround, _sinf: Math.sin, _sqrtf: Math.sqrt, _tanf: Math.tan,\n                _acoshf: Math.acosh, _asinhf: Math.asinh, _atanhf: Math.atanh,\n                _coshf: Math.cosh, _sinhf: Math.sinh, _tanhf: Math.tanh,\n                // Double version\n                _acos: Math.acos, _asin: Math.asin, _atan: Math.atan, _atan2: Math.atan2,\n                _ceil: Math.ceil, _cos: Math.cos, _exp: Math.exp, _floor: Math.floor,\n                _fmod: (x: number, y: number) => x % y,\n                _log: Math.log, _log10: Math.log10, _max_: Math.max, _min_: Math.min,\n                _remainder: (x: number, y: number) => x - Math.round(x / y) * y,\n                _pow: Math.pow, _round: Math.fround, _sin: Math.sin, _sqrt: Math.sqrt, _tan: Math.tan,\n                _acosh: Math.acosh, _asinh: Math.asinh, _atanh: Math.atanh,\n                _cosh: Math.cosh, _sinh: Math.sinh, _tanh: Math.tanh,\n                table: new WebAssembly.Table({ initial: 0, element: \"anyfunc\" })\n            }\n        };\n    }\n    async init(options: { compiledDsp?: TCompiledDsp; sampleRate?: number }) {\n        const { compiledDsp } = options;\n        if (!compiledDsp) throw new Error(\"No Dsp input\");\n\n        this.dspMeta = compiledDsp.dspMeta;\n\n        this.$ins = null;\n        this.$outs = null;\n\n        this.dspInChannnels = [];\n        this.dspOutChannnels = [];\n\n        this.numIn = this.dspMeta.inputs;\n        this.numOut = this.dspMeta.outputs;\n        // Memory allocator\n        this.ptrSize = 4;\n        this.sampleSize = 4;\n\n        // Create the WASM instance\n        const dspInstance = await WebAssembly.instantiate(compiledDsp.dspModule, FaustOfflineProcessor.importObject);\n        this.factory = dspInstance.exports as FaustWebAssemblyExports;\n        this.HEAP = this.factory.memory.buffer;\n        this.HEAP32 = new Int32Array(this.HEAP);\n        this.HEAPF32 = new Float32Array(this.HEAP);\n\n        this.output = new Array(this.numOut).fill(null).map(() => new Float32Array(this.bufferSize));\n    }\n    setup(options?: { sampleRate?: number }) {\n        if (!this.dspMeta) throw new Error(\"No Dsp\");\n        this.sampleRate = options && options.sampleRate || 48000;\n\n        // DSP is placed first with index 0. Audio buffer start at the end of DSP.\n        this.$audioHeap = this.dspMeta.size;\n\n        // Setup pointers offset\n        this.$$audioHeapInputs = this.$audioHeap;\n        this.$$audioHeapOutputs = this.$$audioHeapInputs + this.numIn * this.ptrSize;\n\n        // Setup buffer offset\n        this.$audioHeapInputs = this.$$audioHeapOutputs + (this.numOut * this.ptrSize);\n        this.$audioHeapOutputs = this.$audioHeapInputs + (this.numIn * this.bufferSize * this.sampleSize);\n        // Start of DSP memory : Mono DSP is placed first with index 0\n        this.$dsp = 0;\n\n        if (this.numIn > 0) {\n            this.$ins = this.$$audioHeapInputs;\n            for (let i = 0; i < this.numIn; i++) {\n                this.HEAP32[(this.$ins >> 2) + i] = this.$audioHeapInputs + this.bufferSize * this.sampleSize * i;\n            }\n            // Prepare Ins buffer tables\n            const dspInChans = this.HEAP32.subarray(this.$ins >> 2, (this.$ins + this.numIn * this.ptrSize) >> 2);\n            for (let i = 0; i < this.numIn; i++) {\n                this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + this.bufferSize * this.sampleSize) >> 2);\n            }\n        }\n        if (this.numOut > 0) {\n            this.$outs = this.$$audioHeapOutputs;\n            for (let i = 0; i < this.numOut; i++) {\n                this.HEAP32[(this.$outs >> 2) + i] = this.$audioHeapOutputs + this.bufferSize * this.sampleSize * i;\n            }\n            // Prepare Out buffer tables\n            const dspOutChans = this.HEAP32.subarray(this.$outs >> 2, (this.$outs + this.numOut * this.ptrSize) >> 2);\n            for (let i = 0; i < this.numOut; i++) {\n                this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + this.bufferSize * this.sampleSize) >> 2);\n            }\n        }\n        // Init DSP\n        this.factory.init(this.$dsp, this.sampleRate);\n    }\n    compute() {\n        if (!this.factory) return this.output;\n        for (let i = 0; i < this.numIn; i++) {\n            this.dspInChannnels[i].fill(0);\n        }\n        this.factory.compute(this.$dsp, this.bufferSize, this.$ins, this.$outs); // Compute\n        // Copy outputs\n        if (this.output !== undefined) {\n            for (let i = 0; i < this.numOut; i++) {\n                this.output[i].set(this.dspOutChannnels[i]);\n            }\n        }\n        return this.output;\n    }\n    async plot(options?: { compiledDsp?: TCompiledDsp; size?: number; sampleRate?: number }) {\n        if (options && options.compiledDsp) await this.init(options);\n        this.setup(options);\n        const size = options && options.size || 128;\n        const plotted = new Array(this.numOut).fill(null).map(() => new Float32Array(size));\n        for (let i = 0; i < size; i += this.bufferSize) {\n            const computed = this.compute();\n            for (let j = 0; j < plotted.length; j++) {\n                plotted[j].set(size - i > this.bufferSize ? computed[j] : computed[j].subarray(0, size - i), i);\n            }\n        }\n        return plotted;\n    }\n}\n","/* eslint-disable import/named */\n/* eslint-disable no-console */\nimport sha1 from \"crypto-libraries/sha1\";\nimport { LibFaustLoader, LibFaust } from \"./LibFaustLoader\";\nimport { FaustWasmToScriptProcessor } from \"./FaustWasmToScriptProcessor\";\nimport { FaustAudioWorkletProcessorWrapper } from \"./FaustAudioWorkletProcessor\";\nimport { FaustAudioWorkletNode } from \"./FaustAudioWorkletNode\";\n\nimport * as utils from \"./utils\";\nimport { FaustOfflineProcessor } from \"./FaustOfflineProcessor\";\nimport { TCompiledDsp, TFaustCompileOptions, FaustScriptProcessorNode, TFaustCompileArgs, TCompiledCode, TCompiledCodes, TAudioNodeOptions, TCompiledStrCodes } from \"./types\";\n\n// import * as Binaryen from \"binaryen\";\n\n/**\n * Main Faust class,\n * usage: `new Faust().ready.then(faust => any);`\n *\n * @export\n * @class Faust\n */\nexport class Faust {\n    /**\n     * The libfaust Wasm Emscripten Module\n     *\n     * @private\n     * @type {LibFaust}\n     * @memberof Faust\n     */\n    private libFaust: LibFaust;\n    private createWasmCDSPFactoryFromString: ($name: number, $code: number, argc: number, $argv: number, $errorMsg: number, internalMemory: boolean) => number;\n    private deleteAllWasmCDSPFactories: () => void;\n    private expandCDSPFromString: ($name: number, $code: number, argc: number, $argv: number, $shaKey: number, $errorMsg: number) => number;\n    private getCLibFaustVersion: () => number;\n    private getWasmCModule: ($moduleCode: number) => number;\n    private getWasmCModuleSize: ($moduleCode: number) => number;\n    private getWasmCHelpers: ($moduleCode: number) => number;\n    private freeWasmCModule: ($moduleCode: number) => void;\n    private freeCMemory: ($: number) => number;\n    private cleanupAfterException: () => void;\n    private getErrorAfterException: () => number;\n    private getLibFaustVersion: () => string;\n    private generateCAuxFilesFromString: ($name: number, $code: number, argc: number, $argv: number, $errorMsg: number) => number;\n    /**\n     * Debug mode, set to true to print out each message\n     *\n     * @type {boolean}\n     * @memberof Faust\n     */\n    debug: boolean = false;\n    /**\n     * An object to storage compiled dsp with it's sha1\n     *\n     * @private\n     * @type {{ [shaKey: string]: TCompiledDsp }}\n     * @memberof Faust\n     */\n    private dspTable: { [shaKey: string]: TCompiledDsp } = {};\n    /**\n     * Registered WorkletProcessor names\n     *\n     * @private\n     * @type {string[]}\n     * @memberof Faust\n     */\n    private workletProcessors: string[] = [];\n    private _log: string[] = [];\n    /**\n     * Offline processor used to plot\n     *\n     * @private\n     * @type {FaustOfflineProcessor}\n     * @memberof Faust\n     */\n    private offlineProcessor: FaustOfflineProcessor = new FaustOfflineProcessor();\n    /**\n     * Location of `libfaust-wasm.js`\n     *\n     * @private\n     * @type {string}\n     * @memberof Faust\n     */\n    private jsLocation: string;\n    /**\n     * Location of `libfaust-wasm.wasm`\n     *\n     * @private\n     * @type {string}\n     * @memberof Faust\n     */\n    private wasmLocation: string;\n    /**\n     * Location of `libfaust-wasm.data`\n     *\n     * @private\n     * @type {string}\n     * @memberof Faust\n     */\n    private dataLocation: string;\n\n    /**\n     * Creates an instance of Faust\n     * usage: `new Faust().ready.then(faust => any);`\n     *\n     * @param {{ debug?: boolean; jsLocation?: string; wasmLocation?: string; dataLocation?: string }} [options]\n     * @memberof Faust\n     */\n    constructor(options?: { debug?: boolean; jsLocation?: string; wasmLocation?: string; dataLocation?: string }) {\n        this.debug = !!(options && options.debug);\n        this.jsLocation = options.jsLocation || \"http://fr0stbyter.github.io/faust2webaudio/dist/libfaust-wasm.js\";\n        this.wasmLocation = options.wasmLocation || \"http://fr0stbyter.github.io/faust2webaudio/dist/libfaust-wasm.wasm\";\n        this.dataLocation = options.dataLocation || \"http://fr0stbyter.github.io/faust2webaudio/dist/libfaust-wasm.data\";\n    }\n    /**\n     * Load a libfaust module\n     *\n     * @returns {Promise<Faust>}\n     * @memberof Faust\n     */\n    async loadLibFaust(): Promise<Faust> {\n        if (this.libFaust) return this;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        this.libFaust = await LibFaustLoader.load(this.jsLocation, this.wasmLocation, this.dataLocation);\n        this.importLibFaustFunctions();\n        return this;\n    }\n    /**\n     * A promise to resolve when libfaust is ready.\n     *\n     * @readonly\n     * @type {Promise<Faust>}\n     * @memberof Faust\n     */\n    get ready(): Promise<Faust> {\n        return this.loadLibFaust();\n    }\n    private importLibFaustFunctions(): void {\n        if (!this.libFaust) return;\n        // Low-level API\n        this.createWasmCDSPFactoryFromString = this.libFaust.cwrap(\"createWasmCDSPFactoryFromString\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\", \"number\"]);\n        this.deleteAllWasmCDSPFactories = this.libFaust.cwrap(\"deleteAllWasmCDSPFactories\", null, []);\n        this.expandCDSPFromString = this.libFaust.cwrap(\"expandCDSPFromString\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\", \"number\"]);\n        this.getCLibFaustVersion = this.libFaust.cwrap(\"getCLibFaustVersion\", \"number\", []);\n        this.getWasmCModule = this.libFaust.cwrap(\"getWasmCModule\", \"number\", [\"number\"]);\n        this.getWasmCModuleSize = this.libFaust.cwrap(\"getWasmCModuleSize\", \"number\", [\"number\"]);\n        this.getWasmCHelpers = this.libFaust.cwrap(\"getWasmCHelpers\", \"number\", [\"number\"]);\n        this.freeWasmCModule = this.libFaust.cwrap(\"freeWasmCModule\", null, [\"number\"]);\n        this.freeCMemory = this.libFaust.cwrap(\"freeCMemory\", null, [\"number\"]);\n        this.cleanupAfterException = this.libFaust.cwrap(\"cleanupAfterException\", null, []);\n        this.getErrorAfterException = this.libFaust.cwrap(\"getErrorAfterException\", \"number\", []);\n        this.getLibFaustVersion = () => this.libFaust.UTF8ToString(this.getCLibFaustVersion());\n        this.generateCAuxFilesFromString = this.libFaust.cwrap(\"generateCAuxFilesFromString\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\"]);\n    }\n    /**\n     * Create a AudioNode from dsp source code with options.\n     *\n     * @param {string} code - the source code\n     * @param {TFaustCompileOptions} optionsIn - options with audioCtx, bufferSize, voices, useWorklet, args, plot and plotHandler\n     * @returns {Promise<FaustAudioWorkletNode | FaustScriptProcessorNode>}\n     * @memberof Faust\n     */\n    async getNode(code: string, optionsIn: TFaustCompileOptions): Promise<FaustAudioWorkletNode | FaustScriptProcessorNode> {\n        const { audioCtx, voices, useWorklet, bufferSize, plotHandler, args } = optionsIn;\n        const argv = utils.toArgv(args);\n        const compiledDsp = await this.compileCodes(code, argv, !voices);\n        if (!compiledDsp) return null;\n        const options = { compiledDsp, audioCtx, voices, plotHandler, bufferSize: useWorklet ? 128 : bufferSize };\n        return useWorklet ? this.getAudioWorkletNode(options) : this.getScriptProcessorNode(options);\n    }\n    /**\n     * Get DSP information\n     *\n     * @param {string} code\n     * @param {{ voices?: number; args?: TFaustCompileArgs }} optionsIn\n     * @returns {Promise<TCompiledDsp>}\n     * @memberof Faust\n     */\n    async inspect(code: string, optionsIn: { voices?: number; args?: TFaustCompileArgs }): Promise<TCompiledDsp> {\n        const { voices, args } = optionsIn;\n        const argv = utils.toArgv(args);\n        return this.compileCodes(code, argv, !voices);\n    }\n    /**\n     * Plot a dsp offline.\n     *\n     * @param {{ code?: string; size?: number; sampleRate?: number; args?: TFaustCompileArgs }} [optionsIn]\n     * @returns {Promise<Float32Array[]>}\n     * @memberof Faust\n     */\n    async plot(optionsIn?: { code?: string; size?: number; sampleRate?: number; args?: TFaustCompileArgs }): Promise<Float32Array[]> {\n        let compiledDsp;\n        const argv = utils.toArgv(optionsIn.args);\n        if (optionsIn.code) {\n            compiledDsp = await this.compileCodes(optionsIn.code, argv, true);\n            if (!compiledDsp) return null;\n        }\n        return this.offlineProcessor.plot({ compiledDsp, ...optionsIn });\n    }\n    /**\n     * Generate Uint8Array and helpersCode from a dsp source code\n     *\n     * @private\n     * @param {string} factoryName - Class name of the source code\n     * @param {string} code - dsp source code\n     * @param {string[]} argvIn - Array of paramaters to be given to the Faust compiler\n     * @param {boolean} internalMemory - Use internal Memory flag, false for poly, true for mono\n     * @returns {TCompiledCode} - An object with ui8Code, code, helpersCode\n     * @memberof Faust\n     */\n    private compileCode(factoryName: string, code: string, argvIn: string[], internalMemory: boolean): TCompiledCode {\n        const codeSize = this.libFaust.lengthBytesUTF8(code) + 1;\n        const $code = this.libFaust._malloc(codeSize);\n        const name = \"FaustDSP\";\n        const nameSize = this.libFaust.lengthBytesUTF8(name) + 1;\n        const $name = this.libFaust._malloc(nameSize);\n        const $errorMsg = this.libFaust._malloc(4096);\n\n        this.libFaust.stringToUTF8(name, $name, nameSize);\n        this.libFaust.stringToUTF8(code, $code, codeSize);\n\n        // Add 'cn' option with the factory name\n        const argv = argvIn || [];\n        argv.push(\"-cn\", factoryName);\n\n        // Prepare 'argv_aux' array for C side\n        const ptrSize = 4;\n        const $argv = this.libFaust._malloc(argv.length * ptrSize); // Get buffer from emscripten.\n        let argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length); // Get a integer view on the newly allocated buffer.\n        for (let i = 0; i < argv.length; i++) {\n            const size$arg = this.libFaust.lengthBytesUTF8(argv[i]) + 1;\n            const $arg = this.libFaust._malloc(size$arg);\n            this.libFaust.stringToUTF8(argv[i], $arg, size$arg);\n            argvBuffer$[i] = $arg;\n        }\n        try {\n            const time1 = performance.now();\n            const $moduleCode = this.createWasmCDSPFactoryFromString($name, $code, argv.length, $argv, $errorMsg, internalMemory);\n            const time2 = performance.now();\n            this.log(\"Faust compilation duration : \" + (time2 - time1));\n            const errorMsg = this.libFaust.UTF8ToString($errorMsg);\n            if (errorMsg) throw new Error(errorMsg);\n\n            if ($moduleCode === 0) return null;\n            const $compiledCode = this.getWasmCModule($moduleCode);\n            const compiledCodeSize = this.getWasmCModuleSize($moduleCode);\n            // Copy native 'binary' string in JavaScript Uint8Array\n            const ui8Code = new Uint8Array(compiledCodeSize);\n            for (let i = 0; i < compiledCodeSize; i++) {\n                // faster than 'getValue' which gets the type of access for each read...\n                ui8Code[i] = this.libFaust.HEAP8[$compiledCode + i];\n            }\n            const $helpersCode = this.getWasmCHelpers($moduleCode);\n            const helpersCode = this.libFaust.UTF8ToString($helpersCode);\n            // Free strings\n            this.libFaust._free($code);\n            this.libFaust._free($name);\n            this.libFaust._free($errorMsg);\n            // Free C allocated wasm module\n            this.freeWasmCModule($moduleCode);\n            // Get an updated integer view on the newly allocated buffer after possible emscripten memory grow\n            argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length);\n            // Free 'argv' C side array\n            for (let i = 0; i < argv.length; i++) {\n                this.libFaust._free(argvBuffer$[i]);\n            }\n            this.libFaust._free($argv);\n            return { ui8Code, code, helpersCode };\n        } catch (e) {\n            // libfaust is compiled without C++ exception activated, so a JS exception is throwed and catched here\n            const errorMsg = this.libFaust.UTF8ToString(this.getErrorAfterException());\n            this.cleanupAfterException();\n            // Report the Emscripten error\n            throw errorMsg ? new Error(errorMsg) : e;\n        }\n    }\n    /**\n     * createDSPFactoryAux\n     * Generate shaKey, effects, dsp, their Wasm Modules and helpers from a dsp source code\n     *\n     * @private\n     * @param {string} code - dsp source code\n     * @param {string[]} argv - Array of paramaters to be given to the Faust compiler\n     * @param {boolean} internalMemory - Use internal Memory flag, false for poly, true for mono\n     * @returns {Promise<TCompiledDsp>} - An object contains shaKey, empty polyphony map, original codes, modules and helpers\n     * @memberof Faust\n     */\n    private async compileCodes(code: string, argv: string[], internalMemory: boolean): Promise<TCompiledDsp> {\n        // Code memory type and argv in the SHAKey to differentiate compilation flags and Monophonic and Polyphonic factories\n        const strArgv = argv.join(\"\");\n        const shaKey = sha1.hash(code + (internalMemory ? \"internal_memory\" : \"external_memory\") + strArgv, { msgFormat: \"string\" });\n        const compiledDsp = this.dspTable[shaKey];\n        if (compiledDsp) {\n            this.log(\"Existing library : \" + shaKey);\n            // Existing factory, do not create it...\n            return compiledDsp;\n        }\n        this.log(\"libfaust.js version : \" + this.getLibFaustVersion());\n        // Create 'effect' expression\n        const effectCode = `adapt(1,1) = _; adapt(2,2) = _,_; adapt(1,2) = _ <: _,_; adapt(2,1) = _,_ :> _;\nadaptor(F,G) = adapt(outputs(F),inputs(G));\ndsp_code = environment{${code}};\nprocess = adaptor(dsp_code.process, dsp_code.effect) : dsp_code.effect;`;\n        const dspCompiledCode = this.compileCode(shaKey, code, argv, internalMemory);\n        let effectCompiledCode: TCompiledCode;\n        try {\n            effectCompiledCode = this.compileCode(shaKey + \"_\", effectCode, argv, internalMemory);\n        } catch (e) {} // eslint-disable-line no-empty\n        const compiledCodes = { dsp: dspCompiledCode, effect: effectCompiledCode };\n        return this.compileDsp(compiledCodes, shaKey);\n    }\n    /**\n     * From a DSP source file, creates a \"self-contained\" DSP source string where all needed librairies have been included.\n     * All compilations options are 'normalized' and included as a comment in the expanded string.\n     *\n     * @param {string} code - dsp source code\n     * @param {TFaustCompileArgs} args - Paramaters to be given to the Faust compiler\n     * @returns {string} \"self-contained\" DSP source string where all needed librairies\n     * @memberof Faust\n     */\n    expandCode(code: string, args?: TFaustCompileArgs): string {\n        this.log(\"libfaust.js version : \" + this.getLibFaustVersion());\n        // Allocate strings on the HEAP\n        const codeSize = this.libFaust.lengthBytesUTF8(code) + 1;\n        const $code = this.libFaust._malloc(codeSize);\n\n        const name = \"FaustDSP\";\n        const nameSize = this.libFaust.lengthBytesUTF8(name) + 1;\n        const $name = this.libFaust._malloc(nameSize);\n\n        const $shaKey = this.libFaust._malloc(64);\n        const $errorMsg = this.libFaust._malloc(4096);\n\n        this.libFaust.stringToUTF8(name, $name, nameSize);\n        this.libFaust.stringToUTF8(code, $code, codeSize);\n\n        const argvIn = args ? utils.toArgv(args) : [];\n        // Force \"wasm\" compilation\n        const argv = [...argvIn, \"-lang\", \"wasm\"];\n\n        // Prepare 'argv' array for C side\n        const ptrSize = 4;\n        const $argv = this.libFaust._malloc(argv.length * ptrSize); // Get buffer from emscripten.\n        let argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length); // Get a integer view on the newly allocated buffer.\n        for (let i = 0; i < argv.length; i++) {\n            const size$arg = this.libFaust.lengthBytesUTF8(argv[i]) + 1;\n            const $arg = this.libFaust._malloc(size$arg);\n            this.libFaust.stringToUTF8(argv[i], $arg, size$arg);\n            argvBuffer$[i] = $arg;\n        }\n        try {\n            const $expandedCode = this.expandCDSPFromString($name, $code, argv.length, $argv, $shaKey, $errorMsg);\n            const expandedCode = this.libFaust.UTF8ToString($expandedCode);\n            const errorMsg = this.libFaust.UTF8ToString($errorMsg);\n            if (errorMsg) this.error(errorMsg);\n            // Free strings\n            this.libFaust._free($code);\n            this.libFaust._free($name);\n            this.libFaust._free($shaKey);\n            this.libFaust._free($errorMsg);\n            // Free C allocated expanded string\n            this.freeCMemory($expandedCode);\n            // Get an updated integer view on the newly allocated buffer after possible emscripten memory grow\n            argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length);\n            // Free 'argv' C side array\n            for (let i = 0; i < argv.length; i++) {\n                this.libFaust._free(argvBuffer$[i]);\n            }\n            this.libFaust._free($argv);\n            return expandedCode;\n        } catch (e) {\n            // libfaust is compiled without C++ exception activated, so a JS exception is throwed and catched here\n            const errorMsg = this.libFaust.UTF8ToString(this.getErrorAfterException());\n            this.cleanupAfterException();\n            // Report the Emscripten error\n            throw errorMsg ? new Error(errorMsg) : e;\n        }\n    }\n    /**\n     * readDSPFactoryFromMachineAux\n     * Compile wasm modules from dsp and effect Uint8Arrays\n     *\n     * @private\n     * @param {TCompiledCodes} codes\n     * @param {string} shaKey\n     * @returns {Promise<TCompiledDsp>}\n     * @memberof Faust\n     */\n    private async compileDsp(codes: TCompiledCodes, shaKey: string): Promise<TCompiledDsp> {\n        const time1 = performance.now();\n        /*\n        if (typeof Binaryen !== \"undefined\") {\n            try {\n                const binaryenModule = Binaryen.readBinary(codes.dsp.ui8Code);\n                this.log(\"Binaryen based optimisation\");\n                binaryenModule.optimize();\n                // console.log(binaryen_module.emitText());\n                codes.dsp.ui8Code = binaryenModule.emitBinary();\n                binaryenModule.dispose();\n            } catch (e) {\n                this.log(\"Binaryen not available, no optimisation...\");\n            }\n        }\n        */\n        const dspModule = await WebAssembly.compile(codes.dsp.ui8Code);\n        if (!dspModule) {\n            this.error(\"Faust DSP factory cannot be compiled\");\n            throw new Error(\"Faust DSP factory cannot be compiled\");\n        }\n        const time2 = performance.now();\n        this.log(\"WASM compilation duration : \" + (time2 - time1));\n        const compiledDsp: TCompiledDsp = { shaKey, codes, dspModule, dspMeta: undefined }; // Default mode\n        // 'libfaust.js' wasm backend generates UI methods, then we compile the code\n        // eval(helpers_code1);\n        // factory.getJSON = eval(\"getJSON\" + dspName);\n        // factory.getBase64Code = eval(\"getBase64Code\" + dspName);\n        try {\n            const json = codes.dsp.helpersCode.match(/getJSON\\w+?\\(\\)[\\s\\n]*{[\\s\\n]*return[\\s\\n]*'(\\{.+?)';}/)[1].replace(/\\\\'/g, \"'\");\n            // const base64Code = codes.dsp.helpersCode.match(/getBase64Code\\w+?\\(\\)[\\s\\n]*{[\\s\\n]*return[\\s\\n]*\"([A-Za-z0-9+/=]+?)\";[\\s\\n]+}/)[1];\n            const meta = JSON.parse(json);\n            compiledDsp.dspMeta = meta;\n        } catch (e) {\n            this.error(\"Error in JSON.parse: \" + e.message);\n            throw e;\n        }\n        this.dspTable[shaKey] = compiledDsp;\n        // Possibly compile effect\n        if (!codes.effect) return compiledDsp;\n        try {\n            const effectModule = await WebAssembly.compile(codes.effect.ui8Code);\n            compiledDsp.effectModule = effectModule;\n            // 'libfaust.js' wasm backend generates UI methods, then we compile the code\n            // eval(helpers_code2);\n            // factory.getJSONeffect = eval(\"getJSON\" + factory_name2);\n            // factory.getBase64Codeeffect = eval(\"getBase64Code\" + factory_name2);\n            try {\n                const json = codes.effect.helpersCode.match(/getJSON\\w+?\\(\\)[\\s\\n]*{[\\s\\n]*return[\\s\\n]*'(\\{.+?)';}/)[1].replace(/\\\\'/g, \"'\");\n                // const base64Code = codes.effect.helpersCode.match(/getBase64Code\\w+?\\(\\)[\\s\\n]*{[\\s\\n]*return[\\s\\n]*\"([A-Za-z0-9+/=]+?)\";[\\s\\n]+}/)[1];\n                const meta = JSON.parse(json);\n                compiledDsp.effectMeta = meta;\n            } catch (e) {\n                this.error(\"Error in JSON.parse: \" + e.message);\n                throw e;\n            }\n        } catch (e) {\n            return compiledDsp;\n        }\n        return compiledDsp;\n    }\n    /**\n     * Get a ScriptProcessorNode from compiled dsp\n     *\n     * @private\n     * @param {TCompiledDsp} compiledDsp - DSP compiled by libfaust\n     * @param {TAudioNodeOptions} optionsIn\n     * @returns {Promise<FaustScriptProcessorNode>}\n     * @memberof Faust\n     */\n    private async getScriptProcessorNode(optionsIn: TAudioNodeOptions): Promise<FaustScriptProcessorNode> {\n        return new FaustWasmToScriptProcessor(this).getNode(optionsIn);\n    }\n    // deleteDSPInstance() {}\n    /**\n     * Get a AudioWorkletNode from compiled dsp\n     *\n     * @private\n     * @param {TAudioNodeOptions} optionsIn\n     * @returns {Promise<FaustAudioWorkletNode>}\n     * @memberof Faust\n     */\n    private async getAudioWorkletNode(optionsIn: TAudioNodeOptions): Promise<FaustAudioWorkletNode> {\n        const { compiledDsp: compiledDspWithCodes, audioCtx, voices, plotHandler } = optionsIn;\n        const compiledDsp = { ...compiledDspWithCodes };\n        delete compiledDsp.codes;\n        const id = compiledDsp.shaKey + \"_\" + voices;\n        if (this.workletProcessors.indexOf(id) === -1) {\n            const strProcessor = `\nconst remap = ${utils.remap.toString()};\nconst midiToFreq = ${utils.midiToFreq.toString()};\nconst findPath = (${utils.findPathClosure.toString()})();\nconst createWasmImport = ${utils.createWasmImport.toString()};\nconst createWasmMemory = ${utils.createWasmMemory.toString()};\nconst faustData = ${JSON.stringify({\n        id,\n        voices,\n        dspMeta: compiledDsp.dspMeta,\n        effectMeta: compiledDsp.effectMeta\n    })};\n(${FaustAudioWorkletProcessorWrapper.toString()})();\n`;\n            const url = window.URL.createObjectURL(new Blob([strProcessor], { type: \"text/javascript\" }));\n            await audioCtx.audioWorklet.addModule(url);\n            this.workletProcessors.push(id);\n        }\n        return new FaustAudioWorkletNode({ audioCtx, id, voices, compiledDsp, plotHandler, mixer32Module: utils.mixer32Module });\n    }\n    /**\n     * Remove a DSP from registry\n     *\n     * @private\n     * @param {TCompiledDsp} compiledDsp\n     * @memberof Faust\n     */\n    private deleteDsp(compiledDsp: TCompiledDsp): void {\n        // The JS side is cleared\n        delete this.dspTable[compiledDsp.shaKey];\n        // The native C++ is cleared each time (freeWasmCModule has been already called in faust.compile)\n        this.deleteAllWasmCDSPFactories();\n    }\n    /**\n     * Stringify current storaged DSP Table.\n     *\n     * @returns {string}\n     * @memberof Faust\n     */\n    stringifyDspTable(): string {\n        const strTable: { [shaKey: string]: TCompiledStrCodes } = {};\n        for (const key in this.dspTable) {\n            const { codes } = this.dspTable[key];\n            strTable[key] = {\n                dsp: {\n                    strCode: btoa(utils.ab2str(codes.dsp.ui8Code)),\n                    code: codes.dsp.code,\n                    helpersCode: codes.dsp.helpersCode\n                },\n                effect: codes.effect ? {\n                    strCode: btoa(utils.ab2str(codes.effect.ui8Code)),\n                    code: codes.effect.code,\n                    helpersCode: codes.effect.helpersCode\n                } : undefined\n            };\n        }\n        return JSON.stringify(strTable);\n    }\n    /**\n     * parse and store a stringified DSP Table.\n     *\n     * @param {string} str\n     * @memberof Faust\n     */\n    parseDspTable(str: string) {\n        const strTable = JSON.parse(str) as { [shaKey: string]: TCompiledStrCodes };\n        for (const shaKey in strTable) {\n            if (this.dspTable[shaKey]) continue;\n            const strCodes = strTable[shaKey];\n            const compiledCodes: TCompiledCodes = {\n                dsp: {\n                    ui8Code: utils.str2ab(atob(strCodes.dsp.strCode)),\n                    code: strCodes.dsp.code,\n                    helpersCode: strCodes.dsp.helpersCode\n                },\n                effect: strCodes.effect ? {\n                    ui8Code: utils.str2ab(atob(strCodes.effect.strCode)),\n                    code: strCodes.effect.code,\n                    helpersCode: strCodes.effect.helpersCode\n                } : undefined\n            };\n            this.compileDsp(compiledCodes, shaKey).then(dsp => this.dspTable[shaKey] = dsp);\n        }\n    }\n    // deleteDSPWorkletInstance() {}\n    /**\n     * Get an SVG Diagram XML File as string\n     *\n     * @param {string} code faust source code\n     * @param {TFaustCompileArgs} args - Paramaters to be given to the Faust compiler\n     * @returns {string} svg file as string\n     * @memberof Faust\n     */\n    getDiagram(code: string, args?: TFaustCompileArgs): string {\n        const codeSize = this.libFaust.lengthBytesUTF8(code) + 1;\n        const $code = this.libFaust._malloc(codeSize);\n        const name = \"FaustDSP\";\n        const nameSize = this.libFaust.lengthBytesUTF8(name) + 1;\n        const $name = this.libFaust._malloc(nameSize);\n        const $errorMsg = this.libFaust._malloc(4096);\n\n        this.libFaust.stringToUTF8(name, $name, nameSize);\n        this.libFaust.stringToUTF8(code, $code, codeSize);\n        const argvIn = args ? utils.toArgv(args) : [];\n        const argv = [...argvIn, \"-lang\", \"wast\", \"-o\", \"/dev/null\", \"-svg\"];\n\n        // Prepare 'argv' array for C side\n        const ptrSize = 4;\n        const $argv = this.libFaust._malloc(argv.length * ptrSize); // Get buffer from emscripten.\n        let argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length); // Get a integer view on the newly allocated buffer.\n        for (let i = 0; i < argv.length; i++) {\n            const size$arg = this.libFaust.lengthBytesUTF8(argv[i]) + 1;\n            const $arg = this.libFaust._malloc(size$arg);\n            this.libFaust.stringToUTF8(argv[i], $arg, size$arg);\n            argvBuffer$[i] = $arg;\n        }\n        try {\n            this.generateCAuxFilesFromString($name, $code, argv.length, $argv, $errorMsg);\n            // Free strings\n            this.libFaust._free($code);\n            this.libFaust._free($name);\n            this.libFaust._free($errorMsg);\n            // Get an updated integer view on the newly allocated buffer after possible emscripten memory grow\n            argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length);\n            // Free 'argv' C side array\n            for (let i = 0; i < argv.length; i++) {\n                this.libFaust._free(argvBuffer$[i]);\n            }\n            this.libFaust._free($argv);\n        } catch (e) {\n            // libfaust is compiled without C++ exception activated, so a JS exception is throwed and catched here\n            const errorMsg = this.libFaust.UTF8ToString(this.getErrorAfterException());\n            this.cleanupAfterException();\n            // Report the Emscripten error\n            throw errorMsg ? new Error(errorMsg) : e;\n        }\n        return this.libFaust.FS.readFile(\"FaustDSP-svg/process.svg\", { encoding: \"utf8\" }) as string;\n    }\n    /**\n     * Expose LibFaust Emscripten Module File System\n     *\n     * @param {string} path path string\n     * @returns {Emscripten.FS} Emscripten Module File System\n     * @memberof Faust\n     */\n    get fs() {\n        return this.libFaust.FS;\n    }\n    log(...args: any[]) {\n        if (this.debug) console.log(...args);\n        const msg = args.length === 1 && typeof args[0] === \"string\" ? args[0] : JSON.stringify(args.length !== 1 ? args : args[0]);\n        this._log.push(msg);\n        if (typeof this.logHandler === \"function\") this.logHandler(msg, 0);\n    }\n    error(...args: any[]) {\n        console.error(...args);\n        const msg = args.length === 1 && typeof args[0] === \"string\" ? args[0] : JSON.stringify(args.length !== 1 ? args : args[0]);\n        this._log.push(msg);\n        if (typeof this.logHandler === \"function\") this.logHandler(msg, 1);\n    }\n    logHandler: (msg: string, errorLevel: 1 | 0) => any;\n}\n","export { Faust } from \"./Faust\";\nexport { FaustAudioWorkletNode } from \"./FaustAudioWorkletNode\";\n"],"sourceRoot":""}